/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.goldgov.origin.modules.file.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-27")
public class RpcFileFragmentService {

  public interface Iface extends RpcFileService.Iface {

    public java.lang.String createEmptyFileFragment(RpcFile file, int fragmentTotal) throws org.apache.thrift.TException;

    public java.lang.String createFileFragment(RpcFile file, int fragmentTotal, java.nio.ByteBuffer bytes) throws org.apache.thrift.TException;

    public void addFileFragment(java.lang.String fileID, int fragment, java.nio.ByteBuffer bytes) throws org.apache.thrift.TException;

    public void completeFileFragment(java.lang.String fileID, int fragmentTotal) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends RpcFileService .AsyncIface {

    public void createEmptyFileFragment(RpcFile file, int fragmentTotal, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void createFileFragment(RpcFile file, int fragmentTotal, java.nio.ByteBuffer bytes, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void addFileFragment(java.lang.String fileID, int fragment, java.nio.ByteBuffer bytes, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void completeFileFragment(java.lang.String fileID, int fragmentTotal, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends RpcFileService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String createEmptyFileFragment(RpcFile file, int fragmentTotal) throws org.apache.thrift.TException
    {
      send_createEmptyFileFragment(file, fragmentTotal);
      return recv_createEmptyFileFragment();
    }

    public void send_createEmptyFileFragment(RpcFile file, int fragmentTotal) throws org.apache.thrift.TException
    {
      createEmptyFileFragment_args args = new createEmptyFileFragment_args();
      args.setFile(file);
      args.setFragmentTotal(fragmentTotal);
      sendBase("createEmptyFileFragment", args);
    }

    public java.lang.String recv_createEmptyFileFragment() throws org.apache.thrift.TException
    {
      createEmptyFileFragment_result result = new createEmptyFileFragment_result();
      receiveBase(result, "createEmptyFileFragment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createEmptyFileFragment failed: unknown result");
    }

    public java.lang.String createFileFragment(RpcFile file, int fragmentTotal, java.nio.ByteBuffer bytes) throws org.apache.thrift.TException
    {
      send_createFileFragment(file, fragmentTotal, bytes);
      return recv_createFileFragment();
    }

    public void send_createFileFragment(RpcFile file, int fragmentTotal, java.nio.ByteBuffer bytes) throws org.apache.thrift.TException
    {
      createFileFragment_args args = new createFileFragment_args();
      args.setFile(file);
      args.setFragmentTotal(fragmentTotal);
      args.setBytes(bytes);
      sendBase("createFileFragment", args);
    }

    public java.lang.String recv_createFileFragment() throws org.apache.thrift.TException
    {
      createFileFragment_result result = new createFileFragment_result();
      receiveBase(result, "createFileFragment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createFileFragment failed: unknown result");
    }

    public void addFileFragment(java.lang.String fileID, int fragment, java.nio.ByteBuffer bytes) throws org.apache.thrift.TException
    {
      send_addFileFragment(fileID, fragment, bytes);
      recv_addFileFragment();
    }

    public void send_addFileFragment(java.lang.String fileID, int fragment, java.nio.ByteBuffer bytes) throws org.apache.thrift.TException
    {
      addFileFragment_args args = new addFileFragment_args();
      args.setFileID(fileID);
      args.setFragment(fragment);
      args.setBytes(bytes);
      sendBase("addFileFragment", args);
    }

    public void recv_addFileFragment() throws org.apache.thrift.TException
    {
      addFileFragment_result result = new addFileFragment_result();
      receiveBase(result, "addFileFragment");
      return;
    }

    public void completeFileFragment(java.lang.String fileID, int fragmentTotal) throws org.apache.thrift.TException
    {
      send_completeFileFragment(fileID, fragmentTotal);
      recv_completeFileFragment();
    }

    public void send_completeFileFragment(java.lang.String fileID, int fragmentTotal) throws org.apache.thrift.TException
    {
      completeFileFragment_args args = new completeFileFragment_args();
      args.setFileID(fileID);
      args.setFragmentTotal(fragmentTotal);
      sendBase("completeFileFragment", args);
    }

    public void recv_completeFileFragment() throws org.apache.thrift.TException
    {
      completeFileFragment_result result = new completeFileFragment_result();
      receiveBase(result, "completeFileFragment");
      return;
    }

  }
  public static class AsyncClient extends RpcFileService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createEmptyFileFragment(RpcFile file, int fragmentTotal, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createEmptyFileFragment_call method_call = new createEmptyFileFragment_call(file, fragmentTotal, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createEmptyFileFragment_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private RpcFile file;
      private int fragmentTotal;
      public createEmptyFileFragment_call(RpcFile file, int fragmentTotal, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.file = file;
        this.fragmentTotal = fragmentTotal;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createEmptyFileFragment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createEmptyFileFragment_args args = new createEmptyFileFragment_args();
        args.setFile(file);
        args.setFragmentTotal(fragmentTotal);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createEmptyFileFragment();
      }
    }

    public void createFileFragment(RpcFile file, int fragmentTotal, java.nio.ByteBuffer bytes, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createFileFragment_call method_call = new createFileFragment_call(file, fragmentTotal, bytes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createFileFragment_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private RpcFile file;
      private int fragmentTotal;
      private java.nio.ByteBuffer bytes;
      public createFileFragment_call(RpcFile file, int fragmentTotal, java.nio.ByteBuffer bytes, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.file = file;
        this.fragmentTotal = fragmentTotal;
        this.bytes = bytes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createFileFragment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createFileFragment_args args = new createFileFragment_args();
        args.setFile(file);
        args.setFragmentTotal(fragmentTotal);
        args.setBytes(bytes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createFileFragment();
      }
    }

    public void addFileFragment(java.lang.String fileID, int fragment, java.nio.ByteBuffer bytes, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addFileFragment_call method_call = new addFileFragment_call(fileID, fragment, bytes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addFileFragment_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String fileID;
      private int fragment;
      private java.nio.ByteBuffer bytes;
      public addFileFragment_call(java.lang.String fileID, int fragment, java.nio.ByteBuffer bytes, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileID = fileID;
        this.fragment = fragment;
        this.bytes = bytes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addFileFragment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addFileFragment_args args = new addFileFragment_args();
        args.setFileID(fileID);
        args.setFragment(fragment);
        args.setBytes(bytes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void completeFileFragment(java.lang.String fileID, int fragmentTotal, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      completeFileFragment_call method_call = new completeFileFragment_call(fileID, fragmentTotal, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class completeFileFragment_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String fileID;
      private int fragmentTotal;
      public completeFileFragment_call(java.lang.String fileID, int fragmentTotal, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileID = fileID;
        this.fragmentTotal = fragmentTotal;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("completeFileFragment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        completeFileFragment_args args = new completeFileFragment_args();
        args.setFileID(fileID);
        args.setFragmentTotal(fragmentTotal);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends RpcFileService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createEmptyFileFragment", new createEmptyFileFragment());
      processMap.put("createFileFragment", new createFileFragment());
      processMap.put("addFileFragment", new addFileFragment());
      processMap.put("completeFileFragment", new completeFileFragment());
      return processMap;
    }

    public static class createEmptyFileFragment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createEmptyFileFragment_args> {
      public createEmptyFileFragment() {
        super("createEmptyFileFragment");
      }

      public createEmptyFileFragment_args getEmptyArgsInstance() {
        return new createEmptyFileFragment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createEmptyFileFragment_result getResult(I iface, createEmptyFileFragment_args args) throws org.apache.thrift.TException {
        createEmptyFileFragment_result result = new createEmptyFileFragment_result();
        result.success = iface.createEmptyFileFragment(args.file, args.fragmentTotal);
        return result;
      }
    }

    public static class createFileFragment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createFileFragment_args> {
      public createFileFragment() {
        super("createFileFragment");
      }

      public createFileFragment_args getEmptyArgsInstance() {
        return new createFileFragment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createFileFragment_result getResult(I iface, createFileFragment_args args) throws org.apache.thrift.TException {
        createFileFragment_result result = new createFileFragment_result();
        result.success = iface.createFileFragment(args.file, args.fragmentTotal, args.bytes);
        return result;
      }
    }

    public static class addFileFragment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addFileFragment_args> {
      public addFileFragment() {
        super("addFileFragment");
      }

      public addFileFragment_args getEmptyArgsInstance() {
        return new addFileFragment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addFileFragment_result getResult(I iface, addFileFragment_args args) throws org.apache.thrift.TException {
        addFileFragment_result result = new addFileFragment_result();
        iface.addFileFragment(args.fileID, args.fragment, args.bytes);
        return result;
      }
    }

    public static class completeFileFragment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, completeFileFragment_args> {
      public completeFileFragment() {
        super("completeFileFragment");
      }

      public completeFileFragment_args getEmptyArgsInstance() {
        return new completeFileFragment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public completeFileFragment_result getResult(I iface, completeFileFragment_args args) throws org.apache.thrift.TException {
        completeFileFragment_result result = new completeFileFragment_result();
        iface.completeFileFragment(args.fileID, args.fragmentTotal);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends RpcFileService.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createEmptyFileFragment", new createEmptyFileFragment());
      processMap.put("createFileFragment", new createFileFragment());
      processMap.put("addFileFragment", new addFileFragment());
      processMap.put("completeFileFragment", new completeFileFragment());
      return processMap;
    }

    public static class createEmptyFileFragment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createEmptyFileFragment_args, java.lang.String> {
      public createEmptyFileFragment() {
        super("createEmptyFileFragment");
      }

      public createEmptyFileFragment_args getEmptyArgsInstance() {
        return new createEmptyFileFragment_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createEmptyFileFragment_result result = new createEmptyFileFragment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createEmptyFileFragment_result result = new createEmptyFileFragment_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createEmptyFileFragment_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createEmptyFileFragment(args.file, args.fragmentTotal,resultHandler);
      }
    }

    public static class createFileFragment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createFileFragment_args, java.lang.String> {
      public createFileFragment() {
        super("createFileFragment");
      }

      public createFileFragment_args getEmptyArgsInstance() {
        return new createFileFragment_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createFileFragment_result result = new createFileFragment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createFileFragment_result result = new createFileFragment_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createFileFragment_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createFileFragment(args.file, args.fragmentTotal, args.bytes,resultHandler);
      }
    }

    public static class addFileFragment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addFileFragment_args, Void> {
      public addFileFragment() {
        super("addFileFragment");
      }

      public addFileFragment_args getEmptyArgsInstance() {
        return new addFileFragment_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addFileFragment_result result = new addFileFragment_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addFileFragment_result result = new addFileFragment_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addFileFragment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addFileFragment(args.fileID, args.fragment, args.bytes,resultHandler);
      }
    }

    public static class completeFileFragment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, completeFileFragment_args, Void> {
      public completeFileFragment() {
        super("completeFileFragment");
      }

      public completeFileFragment_args getEmptyArgsInstance() {
        return new completeFileFragment_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            completeFileFragment_result result = new completeFileFragment_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            completeFileFragment_result result = new completeFileFragment_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, completeFileFragment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.completeFileFragment(args.fileID, args.fragmentTotal,resultHandler);
      }
    }

  }

  public static class createEmptyFileFragment_args implements org.apache.thrift.TBase<createEmptyFileFragment_args, createEmptyFileFragment_args._Fields>, java.io.Serializable, Cloneable, Comparable<createEmptyFileFragment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createEmptyFileFragment_args");

    private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("file", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FRAGMENT_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("fragmentTotal", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createEmptyFileFragment_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createEmptyFileFragment_argsTupleSchemeFactory();

    private RpcFile file; // required
    private int fragmentTotal; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE((short)1, "file"),
      FRAGMENT_TOTAL((short)2, "fragmentTotal");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE
            return FILE;
          case 2: // FRAGMENT_TOTAL
            return FRAGMENT_TOTAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FRAGMENTTOTAL_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RpcFile.class)));
      tmpMap.put(_Fields.FRAGMENT_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("fragmentTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createEmptyFileFragment_args.class, metaDataMap);
    }

    public createEmptyFileFragment_args() {
    }

    public createEmptyFileFragment_args(
      RpcFile file,
      int fragmentTotal)
    {
      this();
      this.file = file;
      this.fragmentTotal = fragmentTotal;
      setFragmentTotalIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createEmptyFileFragment_args(createEmptyFileFragment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFile()) {
        this.file = new RpcFile(other.file);
      }
      this.fragmentTotal = other.fragmentTotal;
    }

    public createEmptyFileFragment_args deepCopy() {
      return new createEmptyFileFragment_args(this);
    }

    @Override
    public void clear() {
      this.file = null;
      setFragmentTotalIsSet(false);
      this.fragmentTotal = 0;
    }

    public RpcFile getFile() {
      return this.file;
    }

    public void setFile(RpcFile file) {
      this.file = file;
    }

    public void unsetFile() {
      this.file = null;
    }

    /** Returns true if field file is set (has been assigned a value) and false otherwise */
    public boolean isSetFile() {
      return this.file != null;
    }

    public void setFileIsSet(boolean value) {
      if (!value) {
        this.file = null;
      }
    }

    public int getFragmentTotal() {
      return this.fragmentTotal;
    }

    public void setFragmentTotal(int fragmentTotal) {
      this.fragmentTotal = fragmentTotal;
      setFragmentTotalIsSet(true);
    }

    public void unsetFragmentTotal() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FRAGMENTTOTAL_ISSET_ID);
    }

    /** Returns true if field fragmentTotal is set (has been assigned a value) and false otherwise */
    public boolean isSetFragmentTotal() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FRAGMENTTOTAL_ISSET_ID);
    }

    public void setFragmentTotalIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FRAGMENTTOTAL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FILE:
        if (value == null) {
          unsetFile();
        } else {
          setFile((RpcFile)value);
        }
        break;

      case FRAGMENT_TOTAL:
        if (value == null) {
          unsetFragmentTotal();
        } else {
          setFragmentTotal((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE:
        return getFile();

      case FRAGMENT_TOTAL:
        return getFragmentTotal();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE:
        return isSetFile();
      case FRAGMENT_TOTAL:
        return isSetFragmentTotal();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createEmptyFileFragment_args)
        return this.equals((createEmptyFileFragment_args)that);
      return false;
    }

    public boolean equals(createEmptyFileFragment_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_file = true && this.isSetFile();
      boolean that_present_file = true && that.isSetFile();
      if (this_present_file || that_present_file) {
        if (!(this_present_file && that_present_file))
          return false;
        if (!this.file.equals(that.file))
          return false;
      }

      boolean this_present_fragmentTotal = true;
      boolean that_present_fragmentTotal = true;
      if (this_present_fragmentTotal || that_present_fragmentTotal) {
        if (!(this_present_fragmentTotal && that_present_fragmentTotal))
          return false;
        if (this.fragmentTotal != that.fragmentTotal)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFile()) ? 131071 : 524287);
      if (isSetFile())
        hashCode = hashCode * 8191 + file.hashCode();

      hashCode = hashCode * 8191 + fragmentTotal;

      return hashCode;
    }

    @Override
    public int compareTo(createEmptyFileFragment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFile()).compareTo(other.isSetFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, other.file);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFragmentTotal()).compareTo(other.isSetFragmentTotal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFragmentTotal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragmentTotal, other.fragmentTotal);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createEmptyFileFragment_args(");
      boolean first = true;

      sb.append("file:");
      if (this.file == null) {
        sb.append("null");
      } else {
        sb.append(this.file);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fragmentTotal:");
      sb.append(this.fragmentTotal);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (file != null) {
        file.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createEmptyFileFragment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createEmptyFileFragment_argsStandardScheme getScheme() {
        return new createEmptyFileFragment_argsStandardScheme();
      }
    }

    private static class createEmptyFileFragment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createEmptyFileFragment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createEmptyFileFragment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.file = new RpcFile();
                struct.file.read(iprot);
                struct.setFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FRAGMENT_TOTAL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fragmentTotal = iprot.readI32();
                struct.setFragmentTotalIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createEmptyFileFragment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.file != null) {
          oprot.writeFieldBegin(FILE_FIELD_DESC);
          struct.file.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FRAGMENT_TOTAL_FIELD_DESC);
        oprot.writeI32(struct.fragmentTotal);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createEmptyFileFragment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createEmptyFileFragment_argsTupleScheme getScheme() {
        return new createEmptyFileFragment_argsTupleScheme();
      }
    }

    private static class createEmptyFileFragment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createEmptyFileFragment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createEmptyFileFragment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFile()) {
          optionals.set(0);
        }
        if (struct.isSetFragmentTotal()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFile()) {
          struct.file.write(oprot);
        }
        if (struct.isSetFragmentTotal()) {
          oprot.writeI32(struct.fragmentTotal);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createEmptyFileFragment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.file = new RpcFile();
          struct.file.read(iprot);
          struct.setFileIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fragmentTotal = iprot.readI32();
          struct.setFragmentTotalIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createEmptyFileFragment_result implements org.apache.thrift.TBase<createEmptyFileFragment_result, createEmptyFileFragment_result._Fields>, java.io.Serializable, Cloneable, Comparable<createEmptyFileFragment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createEmptyFileFragment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createEmptyFileFragment_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createEmptyFileFragment_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createEmptyFileFragment_result.class, metaDataMap);
    }

    public createEmptyFileFragment_result() {
    }

    public createEmptyFileFragment_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createEmptyFileFragment_result(createEmptyFileFragment_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createEmptyFileFragment_result deepCopy() {
      return new createEmptyFileFragment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createEmptyFileFragment_result)
        return this.equals((createEmptyFileFragment_result)that);
      return false;
    }

    public boolean equals(createEmptyFileFragment_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createEmptyFileFragment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createEmptyFileFragment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createEmptyFileFragment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createEmptyFileFragment_resultStandardScheme getScheme() {
        return new createEmptyFileFragment_resultStandardScheme();
      }
    }

    private static class createEmptyFileFragment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createEmptyFileFragment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createEmptyFileFragment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createEmptyFileFragment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createEmptyFileFragment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createEmptyFileFragment_resultTupleScheme getScheme() {
        return new createEmptyFileFragment_resultTupleScheme();
      }
    }

    private static class createEmptyFileFragment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createEmptyFileFragment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createEmptyFileFragment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createEmptyFileFragment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createFileFragment_args implements org.apache.thrift.TBase<createFileFragment_args, createFileFragment_args._Fields>, java.io.Serializable, Cloneable, Comparable<createFileFragment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createFileFragment_args");

    private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("file", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FRAGMENT_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("fragmentTotal", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("bytes", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createFileFragment_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createFileFragment_argsTupleSchemeFactory();

    private RpcFile file; // required
    private int fragmentTotal; // required
    private java.nio.ByteBuffer bytes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE((short)1, "file"),
      FRAGMENT_TOTAL((short)2, "fragmentTotal"),
      BYTES((short)3, "bytes");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE
            return FILE;
          case 2: // FRAGMENT_TOTAL
            return FRAGMENT_TOTAL;
          case 3: // BYTES
            return BYTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FRAGMENTTOTAL_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RpcFile.class)));
      tmpMap.put(_Fields.FRAGMENT_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("fragmentTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BYTES, new org.apache.thrift.meta_data.FieldMetaData("bytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createFileFragment_args.class, metaDataMap);
    }

    public createFileFragment_args() {
    }

    public createFileFragment_args(
      RpcFile file,
      int fragmentTotal,
      java.nio.ByteBuffer bytes)
    {
      this();
      this.file = file;
      this.fragmentTotal = fragmentTotal;
      setFragmentTotalIsSet(true);
      this.bytes = org.apache.thrift.TBaseHelper.copyBinary(bytes);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createFileFragment_args(createFileFragment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFile()) {
        this.file = new RpcFile(other.file);
      }
      this.fragmentTotal = other.fragmentTotal;
      if (other.isSetBytes()) {
        this.bytes = org.apache.thrift.TBaseHelper.copyBinary(other.bytes);
      }
    }

    public createFileFragment_args deepCopy() {
      return new createFileFragment_args(this);
    }

    @Override
    public void clear() {
      this.file = null;
      setFragmentTotalIsSet(false);
      this.fragmentTotal = 0;
      this.bytes = null;
    }

    public RpcFile getFile() {
      return this.file;
    }

    public void setFile(RpcFile file) {
      this.file = file;
    }

    public void unsetFile() {
      this.file = null;
    }

    /** Returns true if field file is set (has been assigned a value) and false otherwise */
    public boolean isSetFile() {
      return this.file != null;
    }

    public void setFileIsSet(boolean value) {
      if (!value) {
        this.file = null;
      }
    }

    public int getFragmentTotal() {
      return this.fragmentTotal;
    }

    public void setFragmentTotal(int fragmentTotal) {
      this.fragmentTotal = fragmentTotal;
      setFragmentTotalIsSet(true);
    }

    public void unsetFragmentTotal() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FRAGMENTTOTAL_ISSET_ID);
    }

    /** Returns true if field fragmentTotal is set (has been assigned a value) and false otherwise */
    public boolean isSetFragmentTotal() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FRAGMENTTOTAL_ISSET_ID);
    }

    public void setFragmentTotalIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FRAGMENTTOTAL_ISSET_ID, value);
    }

    public byte[] getBytes() {
      setBytes(org.apache.thrift.TBaseHelper.rightSize(bytes));
      return bytes == null ? null : bytes.array();
    }

    public java.nio.ByteBuffer bufferForBytes() {
      return org.apache.thrift.TBaseHelper.copyBinary(bytes);
    }

    public void setBytes(byte[] bytes) {
      this.bytes = bytes == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(bytes.clone());
    }

    public void setBytes(java.nio.ByteBuffer bytes) {
      this.bytes = org.apache.thrift.TBaseHelper.copyBinary(bytes);
    }

    public void unsetBytes() {
      this.bytes = null;
    }

    /** Returns true if field bytes is set (has been assigned a value) and false otherwise */
    public boolean isSetBytes() {
      return this.bytes != null;
    }

    public void setBytesIsSet(boolean value) {
      if (!value) {
        this.bytes = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FILE:
        if (value == null) {
          unsetFile();
        } else {
          setFile((RpcFile)value);
        }
        break;

      case FRAGMENT_TOTAL:
        if (value == null) {
          unsetFragmentTotal();
        } else {
          setFragmentTotal((java.lang.Integer)value);
        }
        break;

      case BYTES:
        if (value == null) {
          unsetBytes();
        } else {
          if (value instanceof byte[]) {
            setBytes((byte[])value);
          } else {
            setBytes((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE:
        return getFile();

      case FRAGMENT_TOTAL:
        return getFragmentTotal();

      case BYTES:
        return getBytes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE:
        return isSetFile();
      case FRAGMENT_TOTAL:
        return isSetFragmentTotal();
      case BYTES:
        return isSetBytes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createFileFragment_args)
        return this.equals((createFileFragment_args)that);
      return false;
    }

    public boolean equals(createFileFragment_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_file = true && this.isSetFile();
      boolean that_present_file = true && that.isSetFile();
      if (this_present_file || that_present_file) {
        if (!(this_present_file && that_present_file))
          return false;
        if (!this.file.equals(that.file))
          return false;
      }

      boolean this_present_fragmentTotal = true;
      boolean that_present_fragmentTotal = true;
      if (this_present_fragmentTotal || that_present_fragmentTotal) {
        if (!(this_present_fragmentTotal && that_present_fragmentTotal))
          return false;
        if (this.fragmentTotal != that.fragmentTotal)
          return false;
      }

      boolean this_present_bytes = true && this.isSetBytes();
      boolean that_present_bytes = true && that.isSetBytes();
      if (this_present_bytes || that_present_bytes) {
        if (!(this_present_bytes && that_present_bytes))
          return false;
        if (!this.bytes.equals(that.bytes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFile()) ? 131071 : 524287);
      if (isSetFile())
        hashCode = hashCode * 8191 + file.hashCode();

      hashCode = hashCode * 8191 + fragmentTotal;

      hashCode = hashCode * 8191 + ((isSetBytes()) ? 131071 : 524287);
      if (isSetBytes())
        hashCode = hashCode * 8191 + bytes.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createFileFragment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFile()).compareTo(other.isSetFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, other.file);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFragmentTotal()).compareTo(other.isSetFragmentTotal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFragmentTotal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragmentTotal, other.fragmentTotal);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBytes()).compareTo(other.isSetBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytes, other.bytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createFileFragment_args(");
      boolean first = true;

      sb.append("file:");
      if (this.file == null) {
        sb.append("null");
      } else {
        sb.append(this.file);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fragmentTotal:");
      sb.append(this.fragmentTotal);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bytes:");
      if (this.bytes == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.bytes, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (file != null) {
        file.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createFileFragment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createFileFragment_argsStandardScheme getScheme() {
        return new createFileFragment_argsStandardScheme();
      }
    }

    private static class createFileFragment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createFileFragment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createFileFragment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.file = new RpcFile();
                struct.file.read(iprot);
                struct.setFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FRAGMENT_TOTAL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fragmentTotal = iprot.readI32();
                struct.setFragmentTotalIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bytes = iprot.readBinary();
                struct.setBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createFileFragment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.file != null) {
          oprot.writeFieldBegin(FILE_FIELD_DESC);
          struct.file.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FRAGMENT_TOTAL_FIELD_DESC);
        oprot.writeI32(struct.fragmentTotal);
        oprot.writeFieldEnd();
        if (struct.bytes != null) {
          oprot.writeFieldBegin(BYTES_FIELD_DESC);
          oprot.writeBinary(struct.bytes);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createFileFragment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createFileFragment_argsTupleScheme getScheme() {
        return new createFileFragment_argsTupleScheme();
      }
    }

    private static class createFileFragment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createFileFragment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createFileFragment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFile()) {
          optionals.set(0);
        }
        if (struct.isSetFragmentTotal()) {
          optionals.set(1);
        }
        if (struct.isSetBytes()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFile()) {
          struct.file.write(oprot);
        }
        if (struct.isSetFragmentTotal()) {
          oprot.writeI32(struct.fragmentTotal);
        }
        if (struct.isSetBytes()) {
          oprot.writeBinary(struct.bytes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createFileFragment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.file = new RpcFile();
          struct.file.read(iprot);
          struct.setFileIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fragmentTotal = iprot.readI32();
          struct.setFragmentTotalIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bytes = iprot.readBinary();
          struct.setBytesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createFileFragment_result implements org.apache.thrift.TBase<createFileFragment_result, createFileFragment_result._Fields>, java.io.Serializable, Cloneable, Comparable<createFileFragment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createFileFragment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createFileFragment_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createFileFragment_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createFileFragment_result.class, metaDataMap);
    }

    public createFileFragment_result() {
    }

    public createFileFragment_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createFileFragment_result(createFileFragment_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createFileFragment_result deepCopy() {
      return new createFileFragment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createFileFragment_result)
        return this.equals((createFileFragment_result)that);
      return false;
    }

    public boolean equals(createFileFragment_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createFileFragment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createFileFragment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createFileFragment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createFileFragment_resultStandardScheme getScheme() {
        return new createFileFragment_resultStandardScheme();
      }
    }

    private static class createFileFragment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createFileFragment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createFileFragment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createFileFragment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createFileFragment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createFileFragment_resultTupleScheme getScheme() {
        return new createFileFragment_resultTupleScheme();
      }
    }

    private static class createFileFragment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createFileFragment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createFileFragment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createFileFragment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addFileFragment_args implements org.apache.thrift.TBase<addFileFragment_args, addFileFragment_args._Fields>, java.io.Serializable, Cloneable, Comparable<addFileFragment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFileFragment_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FRAGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("bytes", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addFileFragment_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addFileFragment_argsTupleSchemeFactory();

    private java.lang.String fileID; // required
    private int fragment; // required
    private java.nio.ByteBuffer bytes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileID"),
      FRAGMENT((short)2, "fragment"),
      BYTES((short)3, "bytes");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          case 2: // FRAGMENT
            return FRAGMENT;
          case 3: // BYTES
            return BYTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FRAGMENT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FRAGMENT, new org.apache.thrift.meta_data.FieldMetaData("fragment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BYTES, new org.apache.thrift.meta_data.FieldMetaData("bytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFileFragment_args.class, metaDataMap);
    }

    public addFileFragment_args() {
    }

    public addFileFragment_args(
      java.lang.String fileID,
      int fragment,
      java.nio.ByteBuffer bytes)
    {
      this();
      this.fileID = fileID;
      this.fragment = fragment;
      setFragmentIsSet(true);
      this.bytes = org.apache.thrift.TBaseHelper.copyBinary(bytes);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFileFragment_args(addFileFragment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFileID()) {
        this.fileID = other.fileID;
      }
      this.fragment = other.fragment;
      if (other.isSetBytes()) {
        this.bytes = org.apache.thrift.TBaseHelper.copyBinary(other.bytes);
      }
    }

    public addFileFragment_args deepCopy() {
      return new addFileFragment_args(this);
    }

    @Override
    public void clear() {
      this.fileID = null;
      setFragmentIsSet(false);
      this.fragment = 0;
      this.bytes = null;
    }

    public java.lang.String getFileID() {
      return this.fileID;
    }

    public void setFileID(java.lang.String fileID) {
      this.fileID = fileID;
    }

    public void unsetFileID() {
      this.fileID = null;
    }

    /** Returns true if field fileID is set (has been assigned a value) and false otherwise */
    public boolean isSetFileID() {
      return this.fileID != null;
    }

    public void setFileIDIsSet(boolean value) {
      if (!value) {
        this.fileID = null;
      }
    }

    public int getFragment() {
      return this.fragment;
    }

    public void setFragment(int fragment) {
      this.fragment = fragment;
      setFragmentIsSet(true);
    }

    public void unsetFragment() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FRAGMENT_ISSET_ID);
    }

    /** Returns true if field fragment is set (has been assigned a value) and false otherwise */
    public boolean isSetFragment() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FRAGMENT_ISSET_ID);
    }

    public void setFragmentIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FRAGMENT_ISSET_ID, value);
    }

    public byte[] getBytes() {
      setBytes(org.apache.thrift.TBaseHelper.rightSize(bytes));
      return bytes == null ? null : bytes.array();
    }

    public java.nio.ByteBuffer bufferForBytes() {
      return org.apache.thrift.TBaseHelper.copyBinary(bytes);
    }

    public void setBytes(byte[] bytes) {
      this.bytes = bytes == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(bytes.clone());
    }

    public void setBytes(java.nio.ByteBuffer bytes) {
      this.bytes = org.apache.thrift.TBaseHelper.copyBinary(bytes);
    }

    public void unsetBytes() {
      this.bytes = null;
    }

    /** Returns true if field bytes is set (has been assigned a value) and false otherwise */
    public boolean isSetBytes() {
      return this.bytes != null;
    }

    public void setBytesIsSet(boolean value) {
      if (!value) {
        this.bytes = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileID();
        } else {
          setFileID((java.lang.String)value);
        }
        break;

      case FRAGMENT:
        if (value == null) {
          unsetFragment();
        } else {
          setFragment((java.lang.Integer)value);
        }
        break;

      case BYTES:
        if (value == null) {
          unsetBytes();
        } else {
          if (value instanceof byte[]) {
            setBytes((byte[])value);
          } else {
            setBytes((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return getFileID();

      case FRAGMENT:
        return getFragment();

      case BYTES:
        return getBytes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileID();
      case FRAGMENT:
        return isSetFragment();
      case BYTES:
        return isSetBytes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addFileFragment_args)
        return this.equals((addFileFragment_args)that);
      return false;
    }

    public boolean equals(addFileFragment_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fileID = true && this.isSetFileID();
      boolean that_present_fileID = true && that.isSetFileID();
      if (this_present_fileID || that_present_fileID) {
        if (!(this_present_fileID && that_present_fileID))
          return false;
        if (!this.fileID.equals(that.fileID))
          return false;
      }

      boolean this_present_fragment = true;
      boolean that_present_fragment = true;
      if (this_present_fragment || that_present_fragment) {
        if (!(this_present_fragment && that_present_fragment))
          return false;
        if (this.fragment != that.fragment)
          return false;
      }

      boolean this_present_bytes = true && this.isSetBytes();
      boolean that_present_bytes = true && that.isSetBytes();
      if (this_present_bytes || that_present_bytes) {
        if (!(this_present_bytes && that_present_bytes))
          return false;
        if (!this.bytes.equals(that.bytes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFileID()) ? 131071 : 524287);
      if (isSetFileID())
        hashCode = hashCode * 8191 + fileID.hashCode();

      hashCode = hashCode * 8191 + fragment;

      hashCode = hashCode * 8191 + ((isSetBytes()) ? 131071 : 524287);
      if (isSetBytes())
        hashCode = hashCode * 8191 + bytes.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addFileFragment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFileID()).compareTo(other.isSetFileID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileID, other.fileID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFragment()).compareTo(other.isSetFragment());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFragment()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment, other.fragment);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBytes()).compareTo(other.isSetBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytes, other.bytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addFileFragment_args(");
      boolean first = true;

      sb.append("fileID:");
      if (this.fileID == null) {
        sb.append("null");
      } else {
        sb.append(this.fileID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fragment:");
      sb.append(this.fragment);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bytes:");
      if (this.bytes == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.bytes, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFileFragment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addFileFragment_argsStandardScheme getScheme() {
        return new addFileFragment_argsStandardScheme();
      }
    }

    private static class addFileFragment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addFileFragment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFileFragment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileID = iprot.readString();
                struct.setFileIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FRAGMENT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fragment = iprot.readI32();
                struct.setFragmentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bytes = iprot.readBinary();
                struct.setBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFileFragment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileID != null) {
          oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
          oprot.writeString(struct.fileID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FRAGMENT_FIELD_DESC);
        oprot.writeI32(struct.fragment);
        oprot.writeFieldEnd();
        if (struct.bytes != null) {
          oprot.writeFieldBegin(BYTES_FIELD_DESC);
          oprot.writeBinary(struct.bytes);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFileFragment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addFileFragment_argsTupleScheme getScheme() {
        return new addFileFragment_argsTupleScheme();
      }
    }

    private static class addFileFragment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addFileFragment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFileFragment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFileID()) {
          optionals.set(0);
        }
        if (struct.isSetFragment()) {
          optionals.set(1);
        }
        if (struct.isSetBytes()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFileID()) {
          oprot.writeString(struct.fileID);
        }
        if (struct.isSetFragment()) {
          oprot.writeI32(struct.fragment);
        }
        if (struct.isSetBytes()) {
          oprot.writeBinary(struct.bytes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFileFragment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.fileID = iprot.readString();
          struct.setFileIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fragment = iprot.readI32();
          struct.setFragmentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bytes = iprot.readBinary();
          struct.setBytesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addFileFragment_result implements org.apache.thrift.TBase<addFileFragment_result, addFileFragment_result._Fields>, java.io.Serializable, Cloneable, Comparable<addFileFragment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFileFragment_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addFileFragment_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addFileFragment_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFileFragment_result.class, metaDataMap);
    }

    public addFileFragment_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFileFragment_result(addFileFragment_result other) {
    }

    public addFileFragment_result deepCopy() {
      return new addFileFragment_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addFileFragment_result)
        return this.equals((addFileFragment_result)that);
      return false;
    }

    public boolean equals(addFileFragment_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(addFileFragment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addFileFragment_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFileFragment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addFileFragment_resultStandardScheme getScheme() {
        return new addFileFragment_resultStandardScheme();
      }
    }

    private static class addFileFragment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addFileFragment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFileFragment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFileFragment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFileFragment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addFileFragment_resultTupleScheme getScheme() {
        return new addFileFragment_resultTupleScheme();
      }
    }

    private static class addFileFragment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addFileFragment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFileFragment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFileFragment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class completeFileFragment_args implements org.apache.thrift.TBase<completeFileFragment_args, completeFileFragment_args._Fields>, java.io.Serializable, Cloneable, Comparable<completeFileFragment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("completeFileFragment_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FRAGMENT_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("fragmentTotal", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new completeFileFragment_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new completeFileFragment_argsTupleSchemeFactory();

    private java.lang.String fileID; // required
    private int fragmentTotal; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileID"),
      FRAGMENT_TOTAL((short)2, "fragmentTotal");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          case 2: // FRAGMENT_TOTAL
            return FRAGMENT_TOTAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FRAGMENTTOTAL_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FRAGMENT_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("fragmentTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(completeFileFragment_args.class, metaDataMap);
    }

    public completeFileFragment_args() {
    }

    public completeFileFragment_args(
      java.lang.String fileID,
      int fragmentTotal)
    {
      this();
      this.fileID = fileID;
      this.fragmentTotal = fragmentTotal;
      setFragmentTotalIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public completeFileFragment_args(completeFileFragment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFileID()) {
        this.fileID = other.fileID;
      }
      this.fragmentTotal = other.fragmentTotal;
    }

    public completeFileFragment_args deepCopy() {
      return new completeFileFragment_args(this);
    }

    @Override
    public void clear() {
      this.fileID = null;
      setFragmentTotalIsSet(false);
      this.fragmentTotal = 0;
    }

    public java.lang.String getFileID() {
      return this.fileID;
    }

    public void setFileID(java.lang.String fileID) {
      this.fileID = fileID;
    }

    public void unsetFileID() {
      this.fileID = null;
    }

    /** Returns true if field fileID is set (has been assigned a value) and false otherwise */
    public boolean isSetFileID() {
      return this.fileID != null;
    }

    public void setFileIDIsSet(boolean value) {
      if (!value) {
        this.fileID = null;
      }
    }

    public int getFragmentTotal() {
      return this.fragmentTotal;
    }

    public void setFragmentTotal(int fragmentTotal) {
      this.fragmentTotal = fragmentTotal;
      setFragmentTotalIsSet(true);
    }

    public void unsetFragmentTotal() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FRAGMENTTOTAL_ISSET_ID);
    }

    /** Returns true if field fragmentTotal is set (has been assigned a value) and false otherwise */
    public boolean isSetFragmentTotal() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FRAGMENTTOTAL_ISSET_ID);
    }

    public void setFragmentTotalIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FRAGMENTTOTAL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileID();
        } else {
          setFileID((java.lang.String)value);
        }
        break;

      case FRAGMENT_TOTAL:
        if (value == null) {
          unsetFragmentTotal();
        } else {
          setFragmentTotal((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return getFileID();

      case FRAGMENT_TOTAL:
        return getFragmentTotal();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileID();
      case FRAGMENT_TOTAL:
        return isSetFragmentTotal();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof completeFileFragment_args)
        return this.equals((completeFileFragment_args)that);
      return false;
    }

    public boolean equals(completeFileFragment_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fileID = true && this.isSetFileID();
      boolean that_present_fileID = true && that.isSetFileID();
      if (this_present_fileID || that_present_fileID) {
        if (!(this_present_fileID && that_present_fileID))
          return false;
        if (!this.fileID.equals(that.fileID))
          return false;
      }

      boolean this_present_fragmentTotal = true;
      boolean that_present_fragmentTotal = true;
      if (this_present_fragmentTotal || that_present_fragmentTotal) {
        if (!(this_present_fragmentTotal && that_present_fragmentTotal))
          return false;
        if (this.fragmentTotal != that.fragmentTotal)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFileID()) ? 131071 : 524287);
      if (isSetFileID())
        hashCode = hashCode * 8191 + fileID.hashCode();

      hashCode = hashCode * 8191 + fragmentTotal;

      return hashCode;
    }

    @Override
    public int compareTo(completeFileFragment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFileID()).compareTo(other.isSetFileID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileID, other.fileID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFragmentTotal()).compareTo(other.isSetFragmentTotal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFragmentTotal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragmentTotal, other.fragmentTotal);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("completeFileFragment_args(");
      boolean first = true;

      sb.append("fileID:");
      if (this.fileID == null) {
        sb.append("null");
      } else {
        sb.append(this.fileID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fragmentTotal:");
      sb.append(this.fragmentTotal);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class completeFileFragment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public completeFileFragment_argsStandardScheme getScheme() {
        return new completeFileFragment_argsStandardScheme();
      }
    }

    private static class completeFileFragment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<completeFileFragment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, completeFileFragment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileID = iprot.readString();
                struct.setFileIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FRAGMENT_TOTAL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fragmentTotal = iprot.readI32();
                struct.setFragmentTotalIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, completeFileFragment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileID != null) {
          oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
          oprot.writeString(struct.fileID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FRAGMENT_TOTAL_FIELD_DESC);
        oprot.writeI32(struct.fragmentTotal);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class completeFileFragment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public completeFileFragment_argsTupleScheme getScheme() {
        return new completeFileFragment_argsTupleScheme();
      }
    }

    private static class completeFileFragment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<completeFileFragment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, completeFileFragment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFileID()) {
          optionals.set(0);
        }
        if (struct.isSetFragmentTotal()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFileID()) {
          oprot.writeString(struct.fileID);
        }
        if (struct.isSetFragmentTotal()) {
          oprot.writeI32(struct.fragmentTotal);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, completeFileFragment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.fileID = iprot.readString();
          struct.setFileIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fragmentTotal = iprot.readI32();
          struct.setFragmentTotalIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class completeFileFragment_result implements org.apache.thrift.TBase<completeFileFragment_result, completeFileFragment_result._Fields>, java.io.Serializable, Cloneable, Comparable<completeFileFragment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("completeFileFragment_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new completeFileFragment_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new completeFileFragment_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(completeFileFragment_result.class, metaDataMap);
    }

    public completeFileFragment_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public completeFileFragment_result(completeFileFragment_result other) {
    }

    public completeFileFragment_result deepCopy() {
      return new completeFileFragment_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof completeFileFragment_result)
        return this.equals((completeFileFragment_result)that);
      return false;
    }

    public boolean equals(completeFileFragment_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(completeFileFragment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("completeFileFragment_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class completeFileFragment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public completeFileFragment_resultStandardScheme getScheme() {
        return new completeFileFragment_resultStandardScheme();
      }
    }

    private static class completeFileFragment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<completeFileFragment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, completeFileFragment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, completeFileFragment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class completeFileFragment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public completeFileFragment_resultTupleScheme getScheme() {
        return new completeFileFragment_resultTupleScheme();
      }
    }

    private static class completeFileFragment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<completeFileFragment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, completeFileFragment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, completeFileFragment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
