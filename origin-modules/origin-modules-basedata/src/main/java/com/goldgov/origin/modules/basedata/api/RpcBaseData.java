/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.goldgov.origin.modules.basedata.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-07")
public class RpcBaseData implements org.apache.thrift.TBase<RpcBaseData, RpcBaseData._Fields>, java.io.Serializable, Cloneable, Comparable<RpcBaseData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RpcBaseData");

  private static final org.apache.thrift.protocol.TField DATA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dataName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataValue", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORDER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNum", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NODE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeValue", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NODE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("nodePath", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PARENT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("parentData", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField DATA_LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataLocale", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField DATA_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("dataCategory", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RpcBaseDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RpcBaseDataTupleSchemeFactory();

  private java.lang.String dataID; // optional
  private java.lang.String dataName; // optional
  private java.lang.String dataValue; // optional
  private java.lang.String description; // optional
  private int orderNum; // optional
  private int nodeValue; // optional
  private java.lang.String nodePath; // optional
  private RpcBaseData parentData; // optional
  private RpcBaseDataLocale dataLocale; // optional
  private RpcBaseDataCategory dataCategory; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATA_ID((short)1, "dataID"),
    DATA_NAME((short)2, "dataName"),
    DATA_VALUE((short)3, "dataValue"),
    DESCRIPTION((short)4, "description"),
    ORDER_NUM((short)5, "orderNum"),
    NODE_VALUE((short)6, "nodeValue"),
    NODE_PATH((short)7, "nodePath"),
    PARENT_DATA((short)8, "parentData"),
    DATA_LOCALE((short)9, "dataLocale"),
    DATA_CATEGORY((short)10, "dataCategory");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA_ID
          return DATA_ID;
        case 2: // DATA_NAME
          return DATA_NAME;
        case 3: // DATA_VALUE
          return DATA_VALUE;
        case 4: // DESCRIPTION
          return DESCRIPTION;
        case 5: // ORDER_NUM
          return ORDER_NUM;
        case 6: // NODE_VALUE
          return NODE_VALUE;
        case 7: // NODE_PATH
          return NODE_PATH;
        case 8: // PARENT_DATA
          return PARENT_DATA;
        case 9: // DATA_LOCALE
          return DATA_LOCALE;
        case 10: // DATA_CATEGORY
          return DATA_CATEGORY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERNUM_ISSET_ID = 0;
  private static final int __NODEVALUE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DATA_ID,_Fields.DATA_NAME,_Fields.DATA_VALUE,_Fields.DESCRIPTION,_Fields.ORDER_NUM,_Fields.NODE_VALUE,_Fields.NODE_PATH,_Fields.PARENT_DATA,_Fields.DATA_LOCALE,_Fields.DATA_CATEGORY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA_ID, new org.apache.thrift.meta_data.FieldMetaData("dataID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_NAME, new org.apache.thrift.meta_data.FieldMetaData("dataName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_VALUE, new org.apache.thrift.meta_data.FieldMetaData("dataValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_NUM, new org.apache.thrift.meta_data.FieldMetaData("orderNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NODE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("nodeValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NODE_PATH, new org.apache.thrift.meta_data.FieldMetaData("nodePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_DATA, new org.apache.thrift.meta_data.FieldMetaData("parentData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "RpcBaseData")));
    tmpMap.put(_Fields.DATA_LOCALE, new org.apache.thrift.meta_data.FieldMetaData("dataLocale", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RpcBaseDataLocale.class)));
    tmpMap.put(_Fields.DATA_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("dataCategory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RpcBaseDataCategory.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RpcBaseData.class, metaDataMap);
  }

  public RpcBaseData() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RpcBaseData(RpcBaseData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDataID()) {
      this.dataID = other.dataID;
    }
    if (other.isSetDataName()) {
      this.dataName = other.dataName;
    }
    if (other.isSetDataValue()) {
      this.dataValue = other.dataValue;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.orderNum = other.orderNum;
    this.nodeValue = other.nodeValue;
    if (other.isSetNodePath()) {
      this.nodePath = other.nodePath;
    }
    if (other.isSetParentData()) {
      this.parentData = new RpcBaseData(other.parentData);
    }
    if (other.isSetDataLocale()) {
      this.dataLocale = new RpcBaseDataLocale(other.dataLocale);
    }
    if (other.isSetDataCategory()) {
      this.dataCategory = new RpcBaseDataCategory(other.dataCategory);
    }
  }

  public RpcBaseData deepCopy() {
    return new RpcBaseData(this);
  }

  @Override
  public void clear() {
    this.dataID = null;
    this.dataName = null;
    this.dataValue = null;
    this.description = null;
    setOrderNumIsSet(false);
    this.orderNum = 0;
    setNodeValueIsSet(false);
    this.nodeValue = 0;
    this.nodePath = null;
    this.parentData = null;
    this.dataLocale = null;
    this.dataCategory = null;
  }

  public java.lang.String getDataID() {
    return this.dataID;
  }

  public void setDataID(java.lang.String dataID) {
    this.dataID = dataID;
  }

  public void unsetDataID() {
    this.dataID = null;
  }

  /** Returns true if field dataID is set (has been assigned a value) and false otherwise */
  public boolean isSetDataID() {
    return this.dataID != null;
  }

  public void setDataIDIsSet(boolean value) {
    if (!value) {
      this.dataID = null;
    }
  }

  public java.lang.String getDataName() {
    return this.dataName;
  }

  public void setDataName(java.lang.String dataName) {
    this.dataName = dataName;
  }

  public void unsetDataName() {
    this.dataName = null;
  }

  /** Returns true if field dataName is set (has been assigned a value) and false otherwise */
  public boolean isSetDataName() {
    return this.dataName != null;
  }

  public void setDataNameIsSet(boolean value) {
    if (!value) {
      this.dataName = null;
    }
  }

  public java.lang.String getDataValue() {
    return this.dataValue;
  }

  public void setDataValue(java.lang.String dataValue) {
    this.dataValue = dataValue;
  }

  public void unsetDataValue() {
    this.dataValue = null;
  }

  /** Returns true if field dataValue is set (has been assigned a value) and false otherwise */
  public boolean isSetDataValue() {
    return this.dataValue != null;
  }

  public void setDataValueIsSet(boolean value) {
    if (!value) {
      this.dataValue = null;
    }
  }

  public java.lang.String getDescription() {
    return this.description;
  }

  public void setDescription(java.lang.String description) {
    this.description = description;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getOrderNum() {
    return this.orderNum;
  }

  public void setOrderNum(int orderNum) {
    this.orderNum = orderNum;
    setOrderNumIsSet(true);
  }

  public void unsetOrderNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORDERNUM_ISSET_ID);
  }

  /** Returns true if field orderNum is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORDERNUM_ISSET_ID);
  }

  public void setOrderNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORDERNUM_ISSET_ID, value);
  }

  public int getNodeValue() {
    return this.nodeValue;
  }

  public void setNodeValue(int nodeValue) {
    this.nodeValue = nodeValue;
    setNodeValueIsSet(true);
  }

  public void unsetNodeValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NODEVALUE_ISSET_ID);
  }

  /** Returns true if field nodeValue is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NODEVALUE_ISSET_ID);
  }

  public void setNodeValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NODEVALUE_ISSET_ID, value);
  }

  public java.lang.String getNodePath() {
    return this.nodePath;
  }

  public void setNodePath(java.lang.String nodePath) {
    this.nodePath = nodePath;
  }

  public void unsetNodePath() {
    this.nodePath = null;
  }

  /** Returns true if field nodePath is set (has been assigned a value) and false otherwise */
  public boolean isSetNodePath() {
    return this.nodePath != null;
  }

  public void setNodePathIsSet(boolean value) {
    if (!value) {
      this.nodePath = null;
    }
  }

  public RpcBaseData getParentData() {
    return this.parentData;
  }

  public void setParentData(RpcBaseData parentData) {
    this.parentData = parentData;
  }

  public void unsetParentData() {
    this.parentData = null;
  }

  /** Returns true if field parentData is set (has been assigned a value) and false otherwise */
  public boolean isSetParentData() {
    return this.parentData != null;
  }

  public void setParentDataIsSet(boolean value) {
    if (!value) {
      this.parentData = null;
    }
  }

  public RpcBaseDataLocale getDataLocale() {
    return this.dataLocale;
  }

  public void setDataLocale(RpcBaseDataLocale dataLocale) {
    this.dataLocale = dataLocale;
  }

  public void unsetDataLocale() {
    this.dataLocale = null;
  }

  /** Returns true if field dataLocale is set (has been assigned a value) and false otherwise */
  public boolean isSetDataLocale() {
    return this.dataLocale != null;
  }

  public void setDataLocaleIsSet(boolean value) {
    if (!value) {
      this.dataLocale = null;
    }
  }

  public RpcBaseDataCategory getDataCategory() {
    return this.dataCategory;
  }

  public void setDataCategory(RpcBaseDataCategory dataCategory) {
    this.dataCategory = dataCategory;
  }

  public void unsetDataCategory() {
    this.dataCategory = null;
  }

  /** Returns true if field dataCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetDataCategory() {
    return this.dataCategory != null;
  }

  public void setDataCategoryIsSet(boolean value) {
    if (!value) {
      this.dataCategory = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case DATA_ID:
      if (value == null) {
        unsetDataID();
      } else {
        setDataID((java.lang.String)value);
      }
      break;

    case DATA_NAME:
      if (value == null) {
        unsetDataName();
      } else {
        setDataName((java.lang.String)value);
      }
      break;

    case DATA_VALUE:
      if (value == null) {
        unsetDataValue();
      } else {
        setDataValue((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case ORDER_NUM:
      if (value == null) {
        unsetOrderNum();
      } else {
        setOrderNum((java.lang.Integer)value);
      }
      break;

    case NODE_VALUE:
      if (value == null) {
        unsetNodeValue();
      } else {
        setNodeValue((java.lang.Integer)value);
      }
      break;

    case NODE_PATH:
      if (value == null) {
        unsetNodePath();
      } else {
        setNodePath((java.lang.String)value);
      }
      break;

    case PARENT_DATA:
      if (value == null) {
        unsetParentData();
      } else {
        setParentData((RpcBaseData)value);
      }
      break;

    case DATA_LOCALE:
      if (value == null) {
        unsetDataLocale();
      } else {
        setDataLocale((RpcBaseDataLocale)value);
      }
      break;

    case DATA_CATEGORY:
      if (value == null) {
        unsetDataCategory();
      } else {
        setDataCategory((RpcBaseDataCategory)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA_ID:
      return getDataID();

    case DATA_NAME:
      return getDataName();

    case DATA_VALUE:
      return getDataValue();

    case DESCRIPTION:
      return getDescription();

    case ORDER_NUM:
      return getOrderNum();

    case NODE_VALUE:
      return getNodeValue();

    case NODE_PATH:
      return getNodePath();

    case PARENT_DATA:
      return getParentData();

    case DATA_LOCALE:
      return getDataLocale();

    case DATA_CATEGORY:
      return getDataCategory();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DATA_ID:
      return isSetDataID();
    case DATA_NAME:
      return isSetDataName();
    case DATA_VALUE:
      return isSetDataValue();
    case DESCRIPTION:
      return isSetDescription();
    case ORDER_NUM:
      return isSetOrderNum();
    case NODE_VALUE:
      return isSetNodeValue();
    case NODE_PATH:
      return isSetNodePath();
    case PARENT_DATA:
      return isSetParentData();
    case DATA_LOCALE:
      return isSetDataLocale();
    case DATA_CATEGORY:
      return isSetDataCategory();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RpcBaseData)
      return this.equals((RpcBaseData)that);
    return false;
  }

  public boolean equals(RpcBaseData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_dataID = true && this.isSetDataID();
    boolean that_present_dataID = true && that.isSetDataID();
    if (this_present_dataID || that_present_dataID) {
      if (!(this_present_dataID && that_present_dataID))
        return false;
      if (!this.dataID.equals(that.dataID))
        return false;
    }

    boolean this_present_dataName = true && this.isSetDataName();
    boolean that_present_dataName = true && that.isSetDataName();
    if (this_present_dataName || that_present_dataName) {
      if (!(this_present_dataName && that_present_dataName))
        return false;
      if (!this.dataName.equals(that.dataName))
        return false;
    }

    boolean this_present_dataValue = true && this.isSetDataValue();
    boolean that_present_dataValue = true && that.isSetDataValue();
    if (this_present_dataValue || that_present_dataValue) {
      if (!(this_present_dataValue && that_present_dataValue))
        return false;
      if (!this.dataValue.equals(that.dataValue))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_orderNum = true && this.isSetOrderNum();
    boolean that_present_orderNum = true && that.isSetOrderNum();
    if (this_present_orderNum || that_present_orderNum) {
      if (!(this_present_orderNum && that_present_orderNum))
        return false;
      if (this.orderNum != that.orderNum)
        return false;
    }

    boolean this_present_nodeValue = true && this.isSetNodeValue();
    boolean that_present_nodeValue = true && that.isSetNodeValue();
    if (this_present_nodeValue || that_present_nodeValue) {
      if (!(this_present_nodeValue && that_present_nodeValue))
        return false;
      if (this.nodeValue != that.nodeValue)
        return false;
    }

    boolean this_present_nodePath = true && this.isSetNodePath();
    boolean that_present_nodePath = true && that.isSetNodePath();
    if (this_present_nodePath || that_present_nodePath) {
      if (!(this_present_nodePath && that_present_nodePath))
        return false;
      if (!this.nodePath.equals(that.nodePath))
        return false;
    }

    boolean this_present_parentData = true && this.isSetParentData();
    boolean that_present_parentData = true && that.isSetParentData();
    if (this_present_parentData || that_present_parentData) {
      if (!(this_present_parentData && that_present_parentData))
        return false;
      if (!this.parentData.equals(that.parentData))
        return false;
    }

    boolean this_present_dataLocale = true && this.isSetDataLocale();
    boolean that_present_dataLocale = true && that.isSetDataLocale();
    if (this_present_dataLocale || that_present_dataLocale) {
      if (!(this_present_dataLocale && that_present_dataLocale))
        return false;
      if (!this.dataLocale.equals(that.dataLocale))
        return false;
    }

    boolean this_present_dataCategory = true && this.isSetDataCategory();
    boolean that_present_dataCategory = true && that.isSetDataCategory();
    if (this_present_dataCategory || that_present_dataCategory) {
      if (!(this_present_dataCategory && that_present_dataCategory))
        return false;
      if (!this.dataCategory.equals(that.dataCategory))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDataID()) ? 131071 : 524287);
    if (isSetDataID())
      hashCode = hashCode * 8191 + dataID.hashCode();

    hashCode = hashCode * 8191 + ((isSetDataName()) ? 131071 : 524287);
    if (isSetDataName())
      hashCode = hashCode * 8191 + dataName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDataValue()) ? 131071 : 524287);
    if (isSetDataValue())
      hashCode = hashCode * 8191 + dataValue.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrderNum()) ? 131071 : 524287);
    if (isSetOrderNum())
      hashCode = hashCode * 8191 + orderNum;

    hashCode = hashCode * 8191 + ((isSetNodeValue()) ? 131071 : 524287);
    if (isSetNodeValue())
      hashCode = hashCode * 8191 + nodeValue;

    hashCode = hashCode * 8191 + ((isSetNodePath()) ? 131071 : 524287);
    if (isSetNodePath())
      hashCode = hashCode * 8191 + nodePath.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentData()) ? 131071 : 524287);
    if (isSetParentData())
      hashCode = hashCode * 8191 + parentData.hashCode();

    hashCode = hashCode * 8191 + ((isSetDataLocale()) ? 131071 : 524287);
    if (isSetDataLocale())
      hashCode = hashCode * 8191 + dataLocale.hashCode();

    hashCode = hashCode * 8191 + ((isSetDataCategory()) ? 131071 : 524287);
    if (isSetDataCategory())
      hashCode = hashCode * 8191 + dataCategory.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RpcBaseData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDataID()).compareTo(other.isSetDataID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataID, other.dataID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDataName()).compareTo(other.isSetDataName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataName, other.dataName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDataValue()).compareTo(other.isSetDataValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataValue, other.dataValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrderNum()).compareTo(other.isSetOrderNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNum, other.orderNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNodeValue()).compareTo(other.isSetNodeValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeValue, other.nodeValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNodePath()).compareTo(other.isSetNodePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodePath, other.nodePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParentData()).compareTo(other.isSetParentData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentData, other.parentData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDataLocale()).compareTo(other.isSetDataLocale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataLocale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataLocale, other.dataLocale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDataCategory()).compareTo(other.isSetDataCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataCategory, other.dataCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RpcBaseData(");
    boolean first = true;

    if (isSetDataID()) {
      sb.append("dataID:");
      if (this.dataID == null) {
        sb.append("null");
      } else {
        sb.append(this.dataID);
      }
      first = false;
    }
    if (isSetDataName()) {
      if (!first) sb.append(", ");
      sb.append("dataName:");
      if (this.dataName == null) {
        sb.append("null");
      } else {
        sb.append(this.dataName);
      }
      first = false;
    }
    if (isSetDataValue()) {
      if (!first) sb.append(", ");
      sb.append("dataValue:");
      if (this.dataValue == null) {
        sb.append("null");
      } else {
        sb.append(this.dataValue);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetOrderNum()) {
      if (!first) sb.append(", ");
      sb.append("orderNum:");
      sb.append(this.orderNum);
      first = false;
    }
    if (isSetNodeValue()) {
      if (!first) sb.append(", ");
      sb.append("nodeValue:");
      sb.append(this.nodeValue);
      first = false;
    }
    if (isSetNodePath()) {
      if (!first) sb.append(", ");
      sb.append("nodePath:");
      if (this.nodePath == null) {
        sb.append("null");
      } else {
        sb.append(this.nodePath);
      }
      first = false;
    }
    if (isSetParentData()) {
      if (!first) sb.append(", ");
      sb.append("parentData:");
      if (this.parentData == null) {
        sb.append("null");
      } else {
        sb.append(this.parentData);
      }
      first = false;
    }
    if (isSetDataLocale()) {
      if (!first) sb.append(", ");
      sb.append("dataLocale:");
      if (this.dataLocale == null) {
        sb.append("null");
      } else {
        sb.append(this.dataLocale);
      }
      first = false;
    }
    if (isSetDataCategory()) {
      if (!first) sb.append(", ");
      sb.append("dataCategory:");
      if (this.dataCategory == null) {
        sb.append("null");
      } else {
        sb.append(this.dataCategory);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (dataLocale != null) {
      dataLocale.validate();
    }
    if (dataCategory != null) {
      dataCategory.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RpcBaseDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RpcBaseDataStandardScheme getScheme() {
      return new RpcBaseDataStandardScheme();
    }
  }

  private static class RpcBaseDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<RpcBaseData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RpcBaseData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataID = iprot.readString();
              struct.setDataIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataName = iprot.readString();
              struct.setDataNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataValue = iprot.readString();
              struct.setDataValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderNum = iprot.readI32();
              struct.setOrderNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NODE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeValue = iprot.readI32();
              struct.setNodeValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NODE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodePath = iprot.readString();
              struct.setNodePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARENT_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.parentData = new RpcBaseData();
              struct.parentData.read(iprot);
              struct.setParentDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DATA_LOCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dataLocale = new RpcBaseDataLocale();
              struct.dataLocale.read(iprot);
              struct.setDataLocaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DATA_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dataCategory = new RpcBaseDataCategory();
              struct.dataCategory.read(iprot);
              struct.setDataCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RpcBaseData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dataID != null) {
        if (struct.isSetDataID()) {
          oprot.writeFieldBegin(DATA_ID_FIELD_DESC);
          oprot.writeString(struct.dataID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dataName != null) {
        if (struct.isSetDataName()) {
          oprot.writeFieldBegin(DATA_NAME_FIELD_DESC);
          oprot.writeString(struct.dataName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dataValue != null) {
        if (struct.isSetDataValue()) {
          oprot.writeFieldBegin(DATA_VALUE_FIELD_DESC);
          oprot.writeString(struct.dataValue);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderNum()) {
        oprot.writeFieldBegin(ORDER_NUM_FIELD_DESC);
        oprot.writeI32(struct.orderNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNodeValue()) {
        oprot.writeFieldBegin(NODE_VALUE_FIELD_DESC);
        oprot.writeI32(struct.nodeValue);
        oprot.writeFieldEnd();
      }
      if (struct.nodePath != null) {
        if (struct.isSetNodePath()) {
          oprot.writeFieldBegin(NODE_PATH_FIELD_DESC);
          oprot.writeString(struct.nodePath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.parentData != null) {
        if (struct.isSetParentData()) {
          oprot.writeFieldBegin(PARENT_DATA_FIELD_DESC);
          struct.parentData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dataLocale != null) {
        if (struct.isSetDataLocale()) {
          oprot.writeFieldBegin(DATA_LOCALE_FIELD_DESC);
          struct.dataLocale.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dataCategory != null) {
        if (struct.isSetDataCategory()) {
          oprot.writeFieldBegin(DATA_CATEGORY_FIELD_DESC);
          struct.dataCategory.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RpcBaseDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RpcBaseDataTupleScheme getScheme() {
      return new RpcBaseDataTupleScheme();
    }
  }

  private static class RpcBaseDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<RpcBaseData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RpcBaseData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDataID()) {
        optionals.set(0);
      }
      if (struct.isSetDataName()) {
        optionals.set(1);
      }
      if (struct.isSetDataValue()) {
        optionals.set(2);
      }
      if (struct.isSetDescription()) {
        optionals.set(3);
      }
      if (struct.isSetOrderNum()) {
        optionals.set(4);
      }
      if (struct.isSetNodeValue()) {
        optionals.set(5);
      }
      if (struct.isSetNodePath()) {
        optionals.set(6);
      }
      if (struct.isSetParentData()) {
        optionals.set(7);
      }
      if (struct.isSetDataLocale()) {
        optionals.set(8);
      }
      if (struct.isSetDataCategory()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetDataID()) {
        oprot.writeString(struct.dataID);
      }
      if (struct.isSetDataName()) {
        oprot.writeString(struct.dataName);
      }
      if (struct.isSetDataValue()) {
        oprot.writeString(struct.dataValue);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetOrderNum()) {
        oprot.writeI32(struct.orderNum);
      }
      if (struct.isSetNodeValue()) {
        oprot.writeI32(struct.nodeValue);
      }
      if (struct.isSetNodePath()) {
        oprot.writeString(struct.nodePath);
      }
      if (struct.isSetParentData()) {
        struct.parentData.write(oprot);
      }
      if (struct.isSetDataLocale()) {
        struct.dataLocale.write(oprot);
      }
      if (struct.isSetDataCategory()) {
        struct.dataCategory.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RpcBaseData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.dataID = iprot.readString();
        struct.setDataIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dataName = iprot.readString();
        struct.setDataNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dataValue = iprot.readString();
        struct.setDataValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orderNum = iprot.readI32();
        struct.setOrderNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.nodeValue = iprot.readI32();
        struct.setNodeValueIsSet(true);
      }
      if (incoming.get(6)) {
        struct.nodePath = iprot.readString();
        struct.setNodePathIsSet(true);
      }
      if (incoming.get(7)) {
        struct.parentData = new RpcBaseData();
        struct.parentData.read(iprot);
        struct.setParentDataIsSet(true);
      }
      if (incoming.get(8)) {
        struct.dataLocale = new RpcBaseDataLocale();
        struct.dataLocale.read(iprot);
        struct.setDataLocaleIsSet(true);
      }
      if (incoming.get(9)) {
        struct.dataCategory = new RpcBaseDataCategory();
        struct.dataCategory.read(iprot);
        struct.setDataCategoryIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

