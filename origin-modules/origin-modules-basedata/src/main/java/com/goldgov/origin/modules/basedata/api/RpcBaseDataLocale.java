/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.goldgov.origin.modules.basedata.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-07")
public class RpcBaseDataLocale implements org.apache.thrift.TBase<RpcBaseDataLocale, RpcBaseDataLocale._Fields>, java.io.Serializable, Cloneable, Comparable<RpcBaseDataLocale> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RpcBaseDataLocale");

  private static final org.apache.thrift.protocol.TField LOCALE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("localeID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOCALE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("localeCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOCALE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("localeName", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RpcBaseDataLocaleStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RpcBaseDataLocaleTupleSchemeFactory();

  private java.lang.String localeID; // optional
  private java.lang.String localeCode; // optional
  private java.lang.String localeName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCALE_ID((short)1, "localeID"),
    LOCALE_CODE((short)2, "localeCode"),
    LOCALE_NAME((short)3, "localeName");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCALE_ID
          return LOCALE_ID;
        case 2: // LOCALE_CODE
          return LOCALE_CODE;
        case 3: // LOCALE_NAME
          return LOCALE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.LOCALE_ID,_Fields.LOCALE_CODE,_Fields.LOCALE_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCALE_ID, new org.apache.thrift.meta_data.FieldMetaData("localeID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALE_CODE, new org.apache.thrift.meta_data.FieldMetaData("localeCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCALE_NAME, new org.apache.thrift.meta_data.FieldMetaData("localeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RpcBaseDataLocale.class, metaDataMap);
  }

  public RpcBaseDataLocale() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RpcBaseDataLocale(RpcBaseDataLocale other) {
    if (other.isSetLocaleID()) {
      this.localeID = other.localeID;
    }
    if (other.isSetLocaleCode()) {
      this.localeCode = other.localeCode;
    }
    if (other.isSetLocaleName()) {
      this.localeName = other.localeName;
    }
  }

  public RpcBaseDataLocale deepCopy() {
    return new RpcBaseDataLocale(this);
  }

  @Override
  public void clear() {
    this.localeID = null;
    this.localeCode = null;
    this.localeName = null;
  }

  public java.lang.String getLocaleID() {
    return this.localeID;
  }

  public void setLocaleID(java.lang.String localeID) {
    this.localeID = localeID;
  }

  public void unsetLocaleID() {
    this.localeID = null;
  }

  /** Returns true if field localeID is set (has been assigned a value) and false otherwise */
  public boolean isSetLocaleID() {
    return this.localeID != null;
  }

  public void setLocaleIDIsSet(boolean value) {
    if (!value) {
      this.localeID = null;
    }
  }

  public java.lang.String getLocaleCode() {
    return this.localeCode;
  }

  public void setLocaleCode(java.lang.String localeCode) {
    this.localeCode = localeCode;
  }

  public void unsetLocaleCode() {
    this.localeCode = null;
  }

  /** Returns true if field localeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetLocaleCode() {
    return this.localeCode != null;
  }

  public void setLocaleCodeIsSet(boolean value) {
    if (!value) {
      this.localeCode = null;
    }
  }

  public java.lang.String getLocaleName() {
    return this.localeName;
  }

  public void setLocaleName(java.lang.String localeName) {
    this.localeName = localeName;
  }

  public void unsetLocaleName() {
    this.localeName = null;
  }

  /** Returns true if field localeName is set (has been assigned a value) and false otherwise */
  public boolean isSetLocaleName() {
    return this.localeName != null;
  }

  public void setLocaleNameIsSet(boolean value) {
    if (!value) {
      this.localeName = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case LOCALE_ID:
      if (value == null) {
        unsetLocaleID();
      } else {
        setLocaleID((java.lang.String)value);
      }
      break;

    case LOCALE_CODE:
      if (value == null) {
        unsetLocaleCode();
      } else {
        setLocaleCode((java.lang.String)value);
      }
      break;

    case LOCALE_NAME:
      if (value == null) {
        unsetLocaleName();
      } else {
        setLocaleName((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCALE_ID:
      return getLocaleID();

    case LOCALE_CODE:
      return getLocaleCode();

    case LOCALE_NAME:
      return getLocaleName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LOCALE_ID:
      return isSetLocaleID();
    case LOCALE_CODE:
      return isSetLocaleCode();
    case LOCALE_NAME:
      return isSetLocaleName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RpcBaseDataLocale)
      return this.equals((RpcBaseDataLocale)that);
    return false;
  }

  public boolean equals(RpcBaseDataLocale that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_localeID = true && this.isSetLocaleID();
    boolean that_present_localeID = true && that.isSetLocaleID();
    if (this_present_localeID || that_present_localeID) {
      if (!(this_present_localeID && that_present_localeID))
        return false;
      if (!this.localeID.equals(that.localeID))
        return false;
    }

    boolean this_present_localeCode = true && this.isSetLocaleCode();
    boolean that_present_localeCode = true && that.isSetLocaleCode();
    if (this_present_localeCode || that_present_localeCode) {
      if (!(this_present_localeCode && that_present_localeCode))
        return false;
      if (!this.localeCode.equals(that.localeCode))
        return false;
    }

    boolean this_present_localeName = true && this.isSetLocaleName();
    boolean that_present_localeName = true && that.isSetLocaleName();
    if (this_present_localeName || that_present_localeName) {
      if (!(this_present_localeName && that_present_localeName))
        return false;
      if (!this.localeName.equals(that.localeName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLocaleID()) ? 131071 : 524287);
    if (isSetLocaleID())
      hashCode = hashCode * 8191 + localeID.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocaleCode()) ? 131071 : 524287);
    if (isSetLocaleCode())
      hashCode = hashCode * 8191 + localeCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocaleName()) ? 131071 : 524287);
    if (isSetLocaleName())
      hashCode = hashCode * 8191 + localeName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RpcBaseDataLocale other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetLocaleID()).compareTo(other.isSetLocaleID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocaleID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localeID, other.localeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocaleCode()).compareTo(other.isSetLocaleCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocaleCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localeCode, other.localeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocaleName()).compareTo(other.isSetLocaleName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocaleName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localeName, other.localeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RpcBaseDataLocale(");
    boolean first = true;

    if (isSetLocaleID()) {
      sb.append("localeID:");
      if (this.localeID == null) {
        sb.append("null");
      } else {
        sb.append(this.localeID);
      }
      first = false;
    }
    if (isSetLocaleCode()) {
      if (!first) sb.append(", ");
      sb.append("localeCode:");
      if (this.localeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.localeCode);
      }
      first = false;
    }
    if (isSetLocaleName()) {
      if (!first) sb.append(", ");
      sb.append("localeName:");
      if (this.localeName == null) {
        sb.append("null");
      } else {
        sb.append(this.localeName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RpcBaseDataLocaleStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RpcBaseDataLocaleStandardScheme getScheme() {
      return new RpcBaseDataLocaleStandardScheme();
    }
  }

  private static class RpcBaseDataLocaleStandardScheme extends org.apache.thrift.scheme.StandardScheme<RpcBaseDataLocale> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RpcBaseDataLocale struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCALE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.localeID = iprot.readString();
              struct.setLocaleIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCALE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.localeCode = iprot.readString();
              struct.setLocaleCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOCALE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.localeName = iprot.readString();
              struct.setLocaleNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RpcBaseDataLocale struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.localeID != null) {
        if (struct.isSetLocaleID()) {
          oprot.writeFieldBegin(LOCALE_ID_FIELD_DESC);
          oprot.writeString(struct.localeID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.localeCode != null) {
        if (struct.isSetLocaleCode()) {
          oprot.writeFieldBegin(LOCALE_CODE_FIELD_DESC);
          oprot.writeString(struct.localeCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.localeName != null) {
        if (struct.isSetLocaleName()) {
          oprot.writeFieldBegin(LOCALE_NAME_FIELD_DESC);
          oprot.writeString(struct.localeName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RpcBaseDataLocaleTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RpcBaseDataLocaleTupleScheme getScheme() {
      return new RpcBaseDataLocaleTupleScheme();
    }
  }

  private static class RpcBaseDataLocaleTupleScheme extends org.apache.thrift.scheme.TupleScheme<RpcBaseDataLocale> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RpcBaseDataLocale struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLocaleID()) {
        optionals.set(0);
      }
      if (struct.isSetLocaleCode()) {
        optionals.set(1);
      }
      if (struct.isSetLocaleName()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLocaleID()) {
        oprot.writeString(struct.localeID);
      }
      if (struct.isSetLocaleCode()) {
        oprot.writeString(struct.localeCode);
      }
      if (struct.isSetLocaleName()) {
        oprot.writeString(struct.localeName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RpcBaseDataLocale struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.localeID = iprot.readString();
        struct.setLocaleIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.localeCode = iprot.readString();
        struct.setLocaleCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.localeName = iprot.readString();
        struct.setLocaleNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

