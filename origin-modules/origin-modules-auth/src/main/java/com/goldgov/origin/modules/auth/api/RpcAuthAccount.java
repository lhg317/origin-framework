/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.goldgov.origin.modules.auth.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-24")
public class RpcAuthAccount implements org.apache.thrift.TBase<RpcAuthAccount, RpcAuthAccount._Fields>, java.io.Serializable, Cloneable, Comparable<RpcAuthAccount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RpcAuthAccount");

  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("principal", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXPIRED_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("expiredDate", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField LOCKED_FIELD_DESC = new org.apache.thrift.protocol.TField("locked", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField PASSWORD_EXPIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("passwordExpired", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("enabled", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RpcAuthAccountStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RpcAuthAccountTupleSchemeFactory();

  private java.lang.String accountID; // required
  private java.lang.String principal; // required
  private java.lang.String password; // required
  private long expiredDate; // required
  private boolean locked; // required
  private long passwordExpired; // required
  private boolean enabled; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCOUNT_ID((short)1, "accountID"),
    PRINCIPAL((short)2, "principal"),
    PASSWORD((short)3, "password"),
    EXPIRED_DATE((short)4, "expiredDate"),
    LOCKED((short)5, "locked"),
    PASSWORD_EXPIRED((short)6, "passwordExpired"),
    ENABLED((short)7, "enabled");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 2: // PRINCIPAL
          return PRINCIPAL;
        case 3: // PASSWORD
          return PASSWORD;
        case 4: // EXPIRED_DATE
          return EXPIRED_DATE;
        case 5: // LOCKED
          return LOCKED;
        case 6: // PASSWORD_EXPIRED
          return PASSWORD_EXPIRED;
        case 7: // ENABLED
          return ENABLED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPIREDDATE_ISSET_ID = 0;
  private static final int __LOCKED_ISSET_ID = 1;
  private static final int __PASSWORDEXPIRED_ISSET_ID = 2;
  private static final int __ENABLED_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("principal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRED_DATE, new org.apache.thrift.meta_data.FieldMetaData("expiredDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOCKED, new org.apache.thrift.meta_data.FieldMetaData("locked", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PASSWORD_EXPIRED, new org.apache.thrift.meta_data.FieldMetaData("passwordExpired", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENABLED, new org.apache.thrift.meta_data.FieldMetaData("enabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RpcAuthAccount.class, metaDataMap);
  }

  public RpcAuthAccount() {
    this.locked = false;

    this.enabled = true;

  }

  public RpcAuthAccount(
    java.lang.String accountID,
    java.lang.String principal,
    java.lang.String password,
    long expiredDate,
    boolean locked,
    long passwordExpired,
    boolean enabled)
  {
    this();
    this.accountID = accountID;
    this.principal = principal;
    this.password = password;
    this.expiredDate = expiredDate;
    setExpiredDateIsSet(true);
    this.locked = locked;
    setLockedIsSet(true);
    this.passwordExpired = passwordExpired;
    setPasswordExpiredIsSet(true);
    this.enabled = enabled;
    setEnabledIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RpcAuthAccount(RpcAuthAccount other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAccountID()) {
      this.accountID = other.accountID;
    }
    if (other.isSetPrincipal()) {
      this.principal = other.principal;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    this.expiredDate = other.expiredDate;
    this.locked = other.locked;
    this.passwordExpired = other.passwordExpired;
    this.enabled = other.enabled;
  }

  public RpcAuthAccount deepCopy() {
    return new RpcAuthAccount(this);
  }

  @Override
  public void clear() {
    this.accountID = null;
    this.principal = null;
    this.password = null;
    setExpiredDateIsSet(false);
    this.expiredDate = 0;
    this.locked = false;

    setPasswordExpiredIsSet(false);
    this.passwordExpired = 0;
    this.enabled = true;

  }

  public java.lang.String getAccountID() {
    return this.accountID;
  }

  public void setAccountID(java.lang.String accountID) {
    this.accountID = accountID;
  }

  public void unsetAccountID() {
    this.accountID = null;
  }

  /** Returns true if field accountID is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountID() {
    return this.accountID != null;
  }

  public void setAccountIDIsSet(boolean value) {
    if (!value) {
      this.accountID = null;
    }
  }

  public java.lang.String getPrincipal() {
    return this.principal;
  }

  public void setPrincipal(java.lang.String principal) {
    this.principal = principal;
  }

  public void unsetPrincipal() {
    this.principal = null;
  }

  /** Returns true if field principal is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipal() {
    return this.principal != null;
  }

  public void setPrincipalIsSet(boolean value) {
    if (!value) {
      this.principal = null;
    }
  }

  public java.lang.String getPassword() {
    return this.password;
  }

  public void setPassword(java.lang.String password) {
    this.password = password;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public long getExpiredDate() {
    return this.expiredDate;
  }

  public void setExpiredDate(long expiredDate) {
    this.expiredDate = expiredDate;
    setExpiredDateIsSet(true);
  }

  public void unsetExpiredDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPIREDDATE_ISSET_ID);
  }

  /** Returns true if field expiredDate is set (has been assigned a value) and false otherwise */
  public boolean isSetExpiredDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPIREDDATE_ISSET_ID);
  }

  public void setExpiredDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPIREDDATE_ISSET_ID, value);
  }

  public boolean isLocked() {
    return this.locked;
  }

  public void setLocked(boolean locked) {
    this.locked = locked;
    setLockedIsSet(true);
  }

  public void unsetLocked() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCKED_ISSET_ID);
  }

  /** Returns true if field locked is set (has been assigned a value) and false otherwise */
  public boolean isSetLocked() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCKED_ISSET_ID);
  }

  public void setLockedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCKED_ISSET_ID, value);
  }

  public long getPasswordExpired() {
    return this.passwordExpired;
  }

  public void setPasswordExpired(long passwordExpired) {
    this.passwordExpired = passwordExpired;
    setPasswordExpiredIsSet(true);
  }

  public void unsetPasswordExpired() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PASSWORDEXPIRED_ISSET_ID);
  }

  /** Returns true if field passwordExpired is set (has been assigned a value) and false otherwise */
  public boolean isSetPasswordExpired() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PASSWORDEXPIRED_ISSET_ID);
  }

  public void setPasswordExpiredIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PASSWORDEXPIRED_ISSET_ID, value);
  }

  public boolean isEnabled() {
    return this.enabled;
  }

  public void setEnabled(boolean enabled) {
    this.enabled = enabled;
    setEnabledIsSet(true);
  }

  public void unsetEnabled() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLED_ISSET_ID);
  }

  /** Returns true if field enabled is set (has been assigned a value) and false otherwise */
  public boolean isSetEnabled() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLED_ISSET_ID);
  }

  public void setEnabledIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountID();
      } else {
        setAccountID((java.lang.String)value);
      }
      break;

    case PRINCIPAL:
      if (value == null) {
        unsetPrincipal();
      } else {
        setPrincipal((java.lang.String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((java.lang.String)value);
      }
      break;

    case EXPIRED_DATE:
      if (value == null) {
        unsetExpiredDate();
      } else {
        setExpiredDate((java.lang.Long)value);
      }
      break;

    case LOCKED:
      if (value == null) {
        unsetLocked();
      } else {
        setLocked((java.lang.Boolean)value);
      }
      break;

    case PASSWORD_EXPIRED:
      if (value == null) {
        unsetPasswordExpired();
      } else {
        setPasswordExpired((java.lang.Long)value);
      }
      break;

    case ENABLED:
      if (value == null) {
        unsetEnabled();
      } else {
        setEnabled((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCOUNT_ID:
      return getAccountID();

    case PRINCIPAL:
      return getPrincipal();

    case PASSWORD:
      return getPassword();

    case EXPIRED_DATE:
      return getExpiredDate();

    case LOCKED:
      return isLocked();

    case PASSWORD_EXPIRED:
      return getPasswordExpired();

    case ENABLED:
      return isEnabled();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACCOUNT_ID:
      return isSetAccountID();
    case PRINCIPAL:
      return isSetPrincipal();
    case PASSWORD:
      return isSetPassword();
    case EXPIRED_DATE:
      return isSetExpiredDate();
    case LOCKED:
      return isSetLocked();
    case PASSWORD_EXPIRED:
      return isSetPasswordExpired();
    case ENABLED:
      return isSetEnabled();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RpcAuthAccount)
      return this.equals((RpcAuthAccount)that);
    return false;
  }

  public boolean equals(RpcAuthAccount that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_accountID = true && this.isSetAccountID();
    boolean that_present_accountID = true && that.isSetAccountID();
    if (this_present_accountID || that_present_accountID) {
      if (!(this_present_accountID && that_present_accountID))
        return false;
      if (!this.accountID.equals(that.accountID))
        return false;
    }

    boolean this_present_principal = true && this.isSetPrincipal();
    boolean that_present_principal = true && that.isSetPrincipal();
    if (this_present_principal || that_present_principal) {
      if (!(this_present_principal && that_present_principal))
        return false;
      if (!this.principal.equals(that.principal))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_expiredDate = true;
    boolean that_present_expiredDate = true;
    if (this_present_expiredDate || that_present_expiredDate) {
      if (!(this_present_expiredDate && that_present_expiredDate))
        return false;
      if (this.expiredDate != that.expiredDate)
        return false;
    }

    boolean this_present_locked = true;
    boolean that_present_locked = true;
    if (this_present_locked || that_present_locked) {
      if (!(this_present_locked && that_present_locked))
        return false;
      if (this.locked != that.locked)
        return false;
    }

    boolean this_present_passwordExpired = true;
    boolean that_present_passwordExpired = true;
    if (this_present_passwordExpired || that_present_passwordExpired) {
      if (!(this_present_passwordExpired && that_present_passwordExpired))
        return false;
      if (this.passwordExpired != that.passwordExpired)
        return false;
    }

    boolean this_present_enabled = true;
    boolean that_present_enabled = true;
    if (this_present_enabled || that_present_enabled) {
      if (!(this_present_enabled && that_present_enabled))
        return false;
      if (this.enabled != that.enabled)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAccountID()) ? 131071 : 524287);
    if (isSetAccountID())
      hashCode = hashCode * 8191 + accountID.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrincipal()) ? 131071 : 524287);
    if (isSetPrincipal())
      hashCode = hashCode * 8191 + principal.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(expiredDate);

    hashCode = hashCode * 8191 + ((locked) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(passwordExpired);

    hashCode = hashCode * 8191 + ((enabled) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(RpcAuthAccount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAccountID()).compareTo(other.isSetAccountID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountID, other.accountID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrincipal()).compareTo(other.isSetPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal, other.principal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExpiredDate()).compareTo(other.isSetExpiredDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpiredDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expiredDate, other.expiredDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLocked()).compareTo(other.isSetLocked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locked, other.locked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPasswordExpired()).compareTo(other.isSetPasswordExpired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPasswordExpired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwordExpired, other.passwordExpired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEnabled()).compareTo(other.isSetEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enabled, other.enabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RpcAuthAccount(");
    boolean first = true;

    sb.append("accountID:");
    if (this.accountID == null) {
      sb.append("null");
    } else {
      sb.append(this.accountID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("principal:");
    if (this.principal == null) {
      sb.append("null");
    } else {
      sb.append(this.principal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expiredDate:");
    sb.append(this.expiredDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locked:");
    sb.append(this.locked);
    first = false;
    if (!first) sb.append(", ");
    sb.append("passwordExpired:");
    sb.append(this.passwordExpired);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enabled:");
    sb.append(this.enabled);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RpcAuthAccountStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RpcAuthAccountStandardScheme getScheme() {
      return new RpcAuthAccountStandardScheme();
    }
  }

  private static class RpcAuthAccountStandardScheme extends org.apache.thrift.scheme.StandardScheme<RpcAuthAccount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RpcAuthAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountID = iprot.readString();
              struct.setAccountIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.principal = iprot.readString();
              struct.setPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXPIRED_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expiredDate = iprot.readI64();
              struct.setExpiredDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOCKED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.locked = iprot.readBool();
              struct.setLockedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PASSWORD_EXPIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.passwordExpired = iprot.readI64();
              struct.setPasswordExpiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enabled = iprot.readBool();
              struct.setEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RpcAuthAccount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.accountID != null) {
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(struct.accountID);
        oprot.writeFieldEnd();
      }
      if (struct.principal != null) {
        oprot.writeFieldBegin(PRINCIPAL_FIELD_DESC);
        oprot.writeString(struct.principal);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPIRED_DATE_FIELD_DESC);
      oprot.writeI64(struct.expiredDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCKED_FIELD_DESC);
      oprot.writeBool(struct.locked);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PASSWORD_EXPIRED_FIELD_DESC);
      oprot.writeI64(struct.passwordExpired);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENABLED_FIELD_DESC);
      oprot.writeBool(struct.enabled);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RpcAuthAccountTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RpcAuthAccountTupleScheme getScheme() {
      return new RpcAuthAccountTupleScheme();
    }
  }

  private static class RpcAuthAccountTupleScheme extends org.apache.thrift.scheme.TupleScheme<RpcAuthAccount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RpcAuthAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAccountID()) {
        optionals.set(0);
      }
      if (struct.isSetPrincipal()) {
        optionals.set(1);
      }
      if (struct.isSetPassword()) {
        optionals.set(2);
      }
      if (struct.isSetExpiredDate()) {
        optionals.set(3);
      }
      if (struct.isSetLocked()) {
        optionals.set(4);
      }
      if (struct.isSetPasswordExpired()) {
        optionals.set(5);
      }
      if (struct.isSetEnabled()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetAccountID()) {
        oprot.writeString(struct.accountID);
      }
      if (struct.isSetPrincipal()) {
        oprot.writeString(struct.principal);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetExpiredDate()) {
        oprot.writeI64(struct.expiredDate);
      }
      if (struct.isSetLocked()) {
        oprot.writeBool(struct.locked);
      }
      if (struct.isSetPasswordExpired()) {
        oprot.writeI64(struct.passwordExpired);
      }
      if (struct.isSetEnabled()) {
        oprot.writeBool(struct.enabled);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RpcAuthAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.accountID = iprot.readString();
        struct.setAccountIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.principal = iprot.readString();
        struct.setPrincipalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(3)) {
        struct.expiredDate = iprot.readI64();
        struct.setExpiredDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.locked = iprot.readBool();
        struct.setLockedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.passwordExpired = iprot.readI64();
        struct.setPasswordExpiredIsSet(true);
      }
      if (incoming.get(6)) {
        struct.enabled = iprot.readBool();
        struct.setEnabledIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

