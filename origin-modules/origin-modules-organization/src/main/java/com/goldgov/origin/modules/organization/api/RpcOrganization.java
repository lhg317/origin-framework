/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.goldgov.origin.modules.organization.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-12")
public class RpcOrganization implements org.apache.thrift.TBase<RpcOrganization, RpcOrganization._Fields>, java.io.Serializable, Cloneable, Comparable<RpcOrganization> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RpcOrganization");

  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ABBREVIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("abbreviation", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NODE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("nodePath", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NODE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeValue", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PARENT_ORGANIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("parentOrganization", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RpcOrganizationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RpcOrganizationTupleSchemeFactory();

  private java.lang.String orgID; // optional
  private java.lang.String orgName; // optional
  private java.lang.String orgCode; // optional
  private java.lang.String abbreviation; // optional
  private java.lang.String nodePath; // optional
  private int nodeValue; // optional
  private RpcOrganization parentOrganization; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORG_ID((short)1, "orgID"),
    ORG_NAME((short)2, "orgName"),
    ORG_CODE((short)3, "orgCode"),
    ABBREVIATION((short)4, "abbreviation"),
    NODE_PATH((short)5, "nodePath"),
    NODE_VALUE((short)6, "nodeValue"),
    PARENT_ORGANIZATION((short)7, "parentOrganization");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORG_ID
          return ORG_ID;
        case 2: // ORG_NAME
          return ORG_NAME;
        case 3: // ORG_CODE
          return ORG_CODE;
        case 4: // ABBREVIATION
          return ABBREVIATION;
        case 5: // NODE_PATH
          return NODE_PATH;
        case 6: // NODE_VALUE
          return NODE_VALUE;
        case 7: // PARENT_ORGANIZATION
          return PARENT_ORGANIZATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NODEVALUE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ORG_ID,_Fields.ORG_NAME,_Fields.ORG_CODE,_Fields.ABBREVIATION,_Fields.NODE_PATH,_Fields.NODE_VALUE,_Fields.PARENT_ORGANIZATION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ABBREVIATION, new org.apache.thrift.meta_data.FieldMetaData("abbreviation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_PATH, new org.apache.thrift.meta_data.FieldMetaData("nodePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("nodeValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_ORGANIZATION, new org.apache.thrift.meta_data.FieldMetaData("parentOrganization", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "RpcOrganization")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RpcOrganization.class, metaDataMap);
  }

  public RpcOrganization() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RpcOrganization(RpcOrganization other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrgID()) {
      this.orgID = other.orgID;
    }
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetAbbreviation()) {
      this.abbreviation = other.abbreviation;
    }
    if (other.isSetNodePath()) {
      this.nodePath = other.nodePath;
    }
    this.nodeValue = other.nodeValue;
    if (other.isSetParentOrganization()) {
      this.parentOrganization = new RpcOrganization(other.parentOrganization);
    }
  }

  public RpcOrganization deepCopy() {
    return new RpcOrganization(this);
  }

  @Override
  public void clear() {
    this.orgID = null;
    this.orgName = null;
    this.orgCode = null;
    this.abbreviation = null;
    this.nodePath = null;
    setNodeValueIsSet(false);
    this.nodeValue = 0;
    this.parentOrganization = null;
  }

  public java.lang.String getOrgID() {
    return this.orgID;
  }

  public void setOrgID(java.lang.String orgID) {
    this.orgID = orgID;
  }

  public void unsetOrgID() {
    this.orgID = null;
  }

  /** Returns true if field orgID is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgID() {
    return this.orgID != null;
  }

  public void setOrgIDIsSet(boolean value) {
    if (!value) {
      this.orgID = null;
    }
  }

  public java.lang.String getOrgName() {
    return this.orgName;
  }

  public void setOrgName(java.lang.String orgName) {
    this.orgName = orgName;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  public java.lang.String getOrgCode() {
    return this.orgCode;
  }

  public void setOrgCode(java.lang.String orgCode) {
    this.orgCode = orgCode;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  public java.lang.String getAbbreviation() {
    return this.abbreviation;
  }

  public void setAbbreviation(java.lang.String abbreviation) {
    this.abbreviation = abbreviation;
  }

  public void unsetAbbreviation() {
    this.abbreviation = null;
  }

  /** Returns true if field abbreviation is set (has been assigned a value) and false otherwise */
  public boolean isSetAbbreviation() {
    return this.abbreviation != null;
  }

  public void setAbbreviationIsSet(boolean value) {
    if (!value) {
      this.abbreviation = null;
    }
  }

  public java.lang.String getNodePath() {
    return this.nodePath;
  }

  public void setNodePath(java.lang.String nodePath) {
    this.nodePath = nodePath;
  }

  public void unsetNodePath() {
    this.nodePath = null;
  }

  /** Returns true if field nodePath is set (has been assigned a value) and false otherwise */
  public boolean isSetNodePath() {
    return this.nodePath != null;
  }

  public void setNodePathIsSet(boolean value) {
    if (!value) {
      this.nodePath = null;
    }
  }

  public int getNodeValue() {
    return this.nodeValue;
  }

  public void setNodeValue(int nodeValue) {
    this.nodeValue = nodeValue;
    setNodeValueIsSet(true);
  }

  public void unsetNodeValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NODEVALUE_ISSET_ID);
  }

  /** Returns true if field nodeValue is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NODEVALUE_ISSET_ID);
  }

  public void setNodeValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NODEVALUE_ISSET_ID, value);
  }

  public RpcOrganization getParentOrganization() {
    return this.parentOrganization;
  }

  public void setParentOrganization(RpcOrganization parentOrganization) {
    this.parentOrganization = parentOrganization;
  }

  public void unsetParentOrganization() {
    this.parentOrganization = null;
  }

  /** Returns true if field parentOrganization is set (has been assigned a value) and false otherwise */
  public boolean isSetParentOrganization() {
    return this.parentOrganization != null;
  }

  public void setParentOrganizationIsSet(boolean value) {
    if (!value) {
      this.parentOrganization = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ORG_ID:
      if (value == null) {
        unsetOrgID();
      } else {
        setOrgID((java.lang.String)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((java.lang.String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((java.lang.String)value);
      }
      break;

    case ABBREVIATION:
      if (value == null) {
        unsetAbbreviation();
      } else {
        setAbbreviation((java.lang.String)value);
      }
      break;

    case NODE_PATH:
      if (value == null) {
        unsetNodePath();
      } else {
        setNodePath((java.lang.String)value);
      }
      break;

    case NODE_VALUE:
      if (value == null) {
        unsetNodeValue();
      } else {
        setNodeValue((java.lang.Integer)value);
      }
      break;

    case PARENT_ORGANIZATION:
      if (value == null) {
        unsetParentOrganization();
      } else {
        setParentOrganization((RpcOrganization)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ORG_ID:
      return getOrgID();

    case ORG_NAME:
      return getOrgName();

    case ORG_CODE:
      return getOrgCode();

    case ABBREVIATION:
      return getAbbreviation();

    case NODE_PATH:
      return getNodePath();

    case NODE_VALUE:
      return getNodeValue();

    case PARENT_ORGANIZATION:
      return getParentOrganization();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ORG_ID:
      return isSetOrgID();
    case ORG_NAME:
      return isSetOrgName();
    case ORG_CODE:
      return isSetOrgCode();
    case ABBREVIATION:
      return isSetAbbreviation();
    case NODE_PATH:
      return isSetNodePath();
    case NODE_VALUE:
      return isSetNodeValue();
    case PARENT_ORGANIZATION:
      return isSetParentOrganization();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RpcOrganization)
      return this.equals((RpcOrganization)that);
    return false;
  }

  public boolean equals(RpcOrganization that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_orgID = true && this.isSetOrgID();
    boolean that_present_orgID = true && that.isSetOrgID();
    if (this_present_orgID || that_present_orgID) {
      if (!(this_present_orgID && that_present_orgID))
        return false;
      if (!this.orgID.equals(that.orgID))
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_abbreviation = true && this.isSetAbbreviation();
    boolean that_present_abbreviation = true && that.isSetAbbreviation();
    if (this_present_abbreviation || that_present_abbreviation) {
      if (!(this_present_abbreviation && that_present_abbreviation))
        return false;
      if (!this.abbreviation.equals(that.abbreviation))
        return false;
    }

    boolean this_present_nodePath = true && this.isSetNodePath();
    boolean that_present_nodePath = true && that.isSetNodePath();
    if (this_present_nodePath || that_present_nodePath) {
      if (!(this_present_nodePath && that_present_nodePath))
        return false;
      if (!this.nodePath.equals(that.nodePath))
        return false;
    }

    boolean this_present_nodeValue = true && this.isSetNodeValue();
    boolean that_present_nodeValue = true && that.isSetNodeValue();
    if (this_present_nodeValue || that_present_nodeValue) {
      if (!(this_present_nodeValue && that_present_nodeValue))
        return false;
      if (this.nodeValue != that.nodeValue)
        return false;
    }

    boolean this_present_parentOrganization = true && this.isSetParentOrganization();
    boolean that_present_parentOrganization = true && that.isSetParentOrganization();
    if (this_present_parentOrganization || that_present_parentOrganization) {
      if (!(this_present_parentOrganization && that_present_parentOrganization))
        return false;
      if (!this.parentOrganization.equals(that.parentOrganization))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOrgID()) ? 131071 : 524287);
    if (isSetOrgID())
      hashCode = hashCode * 8191 + orgID.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrgName()) ? 131071 : 524287);
    if (isSetOrgName())
      hashCode = hashCode * 8191 + orgName.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrgCode()) ? 131071 : 524287);
    if (isSetOrgCode())
      hashCode = hashCode * 8191 + orgCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetAbbreviation()) ? 131071 : 524287);
    if (isSetAbbreviation())
      hashCode = hashCode * 8191 + abbreviation.hashCode();

    hashCode = hashCode * 8191 + ((isSetNodePath()) ? 131071 : 524287);
    if (isSetNodePath())
      hashCode = hashCode * 8191 + nodePath.hashCode();

    hashCode = hashCode * 8191 + ((isSetNodeValue()) ? 131071 : 524287);
    if (isSetNodeValue())
      hashCode = hashCode * 8191 + nodeValue;

    hashCode = hashCode * 8191 + ((isSetParentOrganization()) ? 131071 : 524287);
    if (isSetParentOrganization())
      hashCode = hashCode * 8191 + parentOrganization.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RpcOrganization other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOrgID()).compareTo(other.isSetOrgID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgID, other.orgID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAbbreviation()).compareTo(other.isSetAbbreviation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbbreviation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abbreviation, other.abbreviation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNodePath()).compareTo(other.isSetNodePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodePath, other.nodePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNodeValue()).compareTo(other.isSetNodeValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeValue, other.nodeValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParentOrganization()).compareTo(other.isSetParentOrganization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentOrganization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentOrganization, other.parentOrganization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RpcOrganization(");
    boolean first = true;

    if (isSetOrgID()) {
      sb.append("orgID:");
      if (this.orgID == null) {
        sb.append("null");
      } else {
        sb.append(this.orgID);
      }
      first = false;
    }
    if (isSetOrgName()) {
      if (!first) sb.append(", ");
      sb.append("orgName:");
      if (this.orgName == null) {
        sb.append("null");
      } else {
        sb.append(this.orgName);
      }
      first = false;
    }
    if (isSetOrgCode()) {
      if (!first) sb.append(", ");
      sb.append("orgCode:");
      if (this.orgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.orgCode);
      }
      first = false;
    }
    if (isSetAbbreviation()) {
      if (!first) sb.append(", ");
      sb.append("abbreviation:");
      if (this.abbreviation == null) {
        sb.append("null");
      } else {
        sb.append(this.abbreviation);
      }
      first = false;
    }
    if (isSetNodePath()) {
      if (!first) sb.append(", ");
      sb.append("nodePath:");
      if (this.nodePath == null) {
        sb.append("null");
      } else {
        sb.append(this.nodePath);
      }
      first = false;
    }
    if (isSetNodeValue()) {
      if (!first) sb.append(", ");
      sb.append("nodeValue:");
      sb.append(this.nodeValue);
      first = false;
    }
    if (isSetParentOrganization()) {
      if (!first) sb.append(", ");
      sb.append("parentOrganization:");
      if (this.parentOrganization == null) {
        sb.append("null");
      } else {
        sb.append(this.parentOrganization);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RpcOrganizationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RpcOrganizationStandardScheme getScheme() {
      return new RpcOrganizationStandardScheme();
    }
  }

  private static class RpcOrganizationStandardScheme extends org.apache.thrift.scheme.StandardScheme<RpcOrganization> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RpcOrganization struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgID = iprot.readString();
              struct.setOrgIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ABBREVIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.abbreviation = iprot.readString();
              struct.setAbbreviationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NODE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodePath = iprot.readString();
              struct.setNodePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NODE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeValue = iprot.readI32();
              struct.setNodeValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARENT_ORGANIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.parentOrganization = new RpcOrganization();
              struct.parentOrganization.read(iprot);
              struct.setParentOrganizationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RpcOrganization struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orgID != null) {
        if (struct.isSetOrgID()) {
          oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
          oprot.writeString(struct.orgID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orgName != null) {
        if (struct.isSetOrgName()) {
          oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
          oprot.writeString(struct.orgName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orgCode != null) {
        if (struct.isSetOrgCode()) {
          oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
          oprot.writeString(struct.orgCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.abbreviation != null) {
        if (struct.isSetAbbreviation()) {
          oprot.writeFieldBegin(ABBREVIATION_FIELD_DESC);
          oprot.writeString(struct.abbreviation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nodePath != null) {
        if (struct.isSetNodePath()) {
          oprot.writeFieldBegin(NODE_PATH_FIELD_DESC);
          oprot.writeString(struct.nodePath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNodeValue()) {
        oprot.writeFieldBegin(NODE_VALUE_FIELD_DESC);
        oprot.writeI32(struct.nodeValue);
        oprot.writeFieldEnd();
      }
      if (struct.parentOrganization != null) {
        if (struct.isSetParentOrganization()) {
          oprot.writeFieldBegin(PARENT_ORGANIZATION_FIELD_DESC);
          struct.parentOrganization.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RpcOrganizationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RpcOrganizationTupleScheme getScheme() {
      return new RpcOrganizationTupleScheme();
    }
  }

  private static class RpcOrganizationTupleScheme extends org.apache.thrift.scheme.TupleScheme<RpcOrganization> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RpcOrganization struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOrgID()) {
        optionals.set(0);
      }
      if (struct.isSetOrgName()) {
        optionals.set(1);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(2);
      }
      if (struct.isSetAbbreviation()) {
        optionals.set(3);
      }
      if (struct.isSetNodePath()) {
        optionals.set(4);
      }
      if (struct.isSetNodeValue()) {
        optionals.set(5);
      }
      if (struct.isSetParentOrganization()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetOrgID()) {
        oprot.writeString(struct.orgID);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetAbbreviation()) {
        oprot.writeString(struct.abbreviation);
      }
      if (struct.isSetNodePath()) {
        oprot.writeString(struct.nodePath);
      }
      if (struct.isSetNodeValue()) {
        oprot.writeI32(struct.nodeValue);
      }
      if (struct.isSetParentOrganization()) {
        struct.parentOrganization.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RpcOrganization struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.orgID = iprot.readString();
        struct.setOrgIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.abbreviation = iprot.readString();
        struct.setAbbreviationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.nodePath = iprot.readString();
        struct.setNodePathIsSet(true);
      }
      if (incoming.get(5)) {
        struct.nodeValue = iprot.readI32();
        struct.setNodeValueIsSet(true);
      }
      if (incoming.get(6)) {
        struct.parentOrganization = new RpcOrganization();
        struct.parentOrganization.read(iprot);
        struct.setParentOrganizationIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

