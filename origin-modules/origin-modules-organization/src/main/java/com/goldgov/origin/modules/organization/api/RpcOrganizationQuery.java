/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.goldgov.origin.modules.organization.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-11")
public class RpcOrganizationQuery implements org.apache.thrift.TBase<RpcOrganizationQuery, RpcOrganizationQuery._Fields>, java.io.Serializable, Cloneable, Comparable<RpcOrganizationQuery> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RpcOrganizationQuery");

  private static final org.apache.thrift.protocol.TField PAGING_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("pagingInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("resultList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CURRENT_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPage", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RpcOrganizationQueryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RpcOrganizationQueryTupleSchemeFactory();

  private com.goldgov.origin.core.service.rpc.RpcPagingInfo pagingInfo; // required
  private java.util.List<RpcOrganization> resultList; // required
  private int pageSize; // required
  private int currentPage; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGING_INFO((short)1, "pagingInfo"),
    RESULT_LIST((short)2, "resultList"),
    PAGE_SIZE((short)3, "pageSize"),
    CURRENT_PAGE((short)4, "currentPage");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGING_INFO
          return PAGING_INFO;
        case 2: // RESULT_LIST
          return RESULT_LIST;
        case 3: // PAGE_SIZE
          return PAGE_SIZE;
        case 4: // CURRENT_PAGE
          return CURRENT_PAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGESIZE_ISSET_ID = 0;
  private static final int __CURRENTPAGE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGING_INFO, new org.apache.thrift.meta_data.FieldMetaData("pagingInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.goldgov.origin.core.service.rpc.RpcPagingInfo.class)));
    tmpMap.put(_Fields.RESULT_LIST, new org.apache.thrift.meta_data.FieldMetaData("resultList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RpcOrganization.class))));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_PAGE, new org.apache.thrift.meta_data.FieldMetaData("currentPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RpcOrganizationQuery.class, metaDataMap);
  }

  public RpcOrganizationQuery() {
  }

  public RpcOrganizationQuery(
    com.goldgov.origin.core.service.rpc.RpcPagingInfo pagingInfo,
    java.util.List<RpcOrganization> resultList,
    int pageSize,
    int currentPage)
  {
    this();
    this.pagingInfo = pagingInfo;
    this.resultList = resultList;
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    this.currentPage = currentPage;
    setCurrentPageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RpcOrganizationQuery(RpcOrganizationQuery other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPagingInfo()) {
      this.pagingInfo = new com.goldgov.origin.core.service.rpc.RpcPagingInfo(other.pagingInfo);
    }
    if (other.isSetResultList()) {
      java.util.List<RpcOrganization> __this__resultList = new java.util.ArrayList<RpcOrganization>(other.resultList.size());
      for (RpcOrganization other_element : other.resultList) {
        __this__resultList.add(new RpcOrganization(other_element));
      }
      this.resultList = __this__resultList;
    }
    this.pageSize = other.pageSize;
    this.currentPage = other.currentPage;
  }

  public RpcOrganizationQuery deepCopy() {
    return new RpcOrganizationQuery(this);
  }

  @Override
  public void clear() {
    this.pagingInfo = null;
    this.resultList = null;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    setCurrentPageIsSet(false);
    this.currentPage = 0;
  }

  public com.goldgov.origin.core.service.rpc.RpcPagingInfo getPagingInfo() {
    return this.pagingInfo;
  }

  public void setPagingInfo(com.goldgov.origin.core.service.rpc.RpcPagingInfo pagingInfo) {
    this.pagingInfo = pagingInfo;
  }

  public void unsetPagingInfo() {
    this.pagingInfo = null;
  }

  /** Returns true if field pagingInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetPagingInfo() {
    return this.pagingInfo != null;
  }

  public void setPagingInfoIsSet(boolean value) {
    if (!value) {
      this.pagingInfo = null;
    }
  }

  public int getResultListSize() {
    return (this.resultList == null) ? 0 : this.resultList.size();
  }

  public java.util.Iterator<RpcOrganization> getResultListIterator() {
    return (this.resultList == null) ? null : this.resultList.iterator();
  }

  public void addToResultList(RpcOrganization elem) {
    if (this.resultList == null) {
      this.resultList = new java.util.ArrayList<RpcOrganization>();
    }
    this.resultList.add(elem);
  }

  public java.util.List<RpcOrganization> getResultList() {
    return this.resultList;
  }

  public void setResultList(java.util.List<RpcOrganization> resultList) {
    this.resultList = resultList;
  }

  public void unsetResultList() {
    this.resultList = null;
  }

  /** Returns true if field resultList is set (has been assigned a value) and false otherwise */
  public boolean isSetResultList() {
    return this.resultList != null;
  }

  public void setResultListIsSet(boolean value) {
    if (!value) {
      this.resultList = null;
    }
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public void setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
  }

  public void unsetPageSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getCurrentPage() {
    return this.currentPage;
  }

  public void setCurrentPage(int currentPage) {
    this.currentPage = currentPage;
    setCurrentPageIsSet(true);
  }

  public void unsetCurrentPage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
  }

  /** Returns true if field currentPage is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentPage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID);
  }

  public void setCurrentPageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURRENTPAGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PAGING_INFO:
      if (value == null) {
        unsetPagingInfo();
      } else {
        setPagingInfo((com.goldgov.origin.core.service.rpc.RpcPagingInfo)value);
      }
      break;

    case RESULT_LIST:
      if (value == null) {
        unsetResultList();
      } else {
        setResultList((java.util.List<RpcOrganization>)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((java.lang.Integer)value);
      }
      break;

    case CURRENT_PAGE:
      if (value == null) {
        unsetCurrentPage();
      } else {
        setCurrentPage((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGING_INFO:
      return getPagingInfo();

    case RESULT_LIST:
      return getResultList();

    case PAGE_SIZE:
      return getPageSize();

    case CURRENT_PAGE:
      return getCurrentPage();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PAGING_INFO:
      return isSetPagingInfo();
    case RESULT_LIST:
      return isSetResultList();
    case PAGE_SIZE:
      return isSetPageSize();
    case CURRENT_PAGE:
      return isSetCurrentPage();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RpcOrganizationQuery)
      return this.equals((RpcOrganizationQuery)that);
    return false;
  }

  public boolean equals(RpcOrganizationQuery that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_pagingInfo = true && this.isSetPagingInfo();
    boolean that_present_pagingInfo = true && that.isSetPagingInfo();
    if (this_present_pagingInfo || that_present_pagingInfo) {
      if (!(this_present_pagingInfo && that_present_pagingInfo))
        return false;
      if (!this.pagingInfo.equals(that.pagingInfo))
        return false;
    }

    boolean this_present_resultList = true && this.isSetResultList();
    boolean that_present_resultList = true && that.isSetResultList();
    if (this_present_resultList || that_present_resultList) {
      if (!(this_present_resultList && that_present_resultList))
        return false;
      if (!this.resultList.equals(that.resultList))
        return false;
    }

    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_currentPage = true;
    boolean that_present_currentPage = true;
    if (this_present_currentPage || that_present_currentPage) {
      if (!(this_present_currentPage && that_present_currentPage))
        return false;
      if (this.currentPage != that.currentPage)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPagingInfo()) ? 131071 : 524287);
    if (isSetPagingInfo())
      hashCode = hashCode * 8191 + pagingInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetResultList()) ? 131071 : 524287);
    if (isSetResultList())
      hashCode = hashCode * 8191 + resultList.hashCode();

    hashCode = hashCode * 8191 + pageSize;

    hashCode = hashCode * 8191 + currentPage;

    return hashCode;
  }

  @Override
  public int compareTo(RpcOrganizationQuery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPagingInfo()).compareTo(other.isSetPagingInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPagingInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagingInfo, other.pagingInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResultList()).compareTo(other.isSetResultList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultList, other.resultList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrentPage()).compareTo(other.isSetCurrentPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPage, other.currentPage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RpcOrganizationQuery(");
    boolean first = true;

    sb.append("pagingInfo:");
    if (this.pagingInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.pagingInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultList:");
    if (this.resultList == null) {
      sb.append("null");
    } else {
      sb.append(this.resultList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentPage:");
    sb.append(this.currentPage);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pagingInfo != null) {
      pagingInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RpcOrganizationQueryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RpcOrganizationQueryStandardScheme getScheme() {
      return new RpcOrganizationQueryStandardScheme();
    }
  }

  private static class RpcOrganizationQueryStandardScheme extends org.apache.thrift.scheme.StandardScheme<RpcOrganizationQuery> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RpcOrganizationQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGING_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pagingInfo = new com.goldgov.origin.core.service.rpc.RpcPagingInfo();
              struct.pagingInfo.read(iprot);
              struct.setPagingInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.resultList = new java.util.ArrayList<RpcOrganization>(_list0.size);
                RpcOrganization _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new RpcOrganization();
                  _elem1.read(iprot);
                  struct.resultList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setResultListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CURRENT_PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currentPage = iprot.readI32();
              struct.setCurrentPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RpcOrganizationQuery struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pagingInfo != null) {
        oprot.writeFieldBegin(PAGING_INFO_FIELD_DESC);
        struct.pagingInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.resultList != null) {
        oprot.writeFieldBegin(RESULT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resultList.size()));
          for (RpcOrganization _iter3 : struct.resultList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_PAGE_FIELD_DESC);
      oprot.writeI32(struct.currentPage);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RpcOrganizationQueryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RpcOrganizationQueryTupleScheme getScheme() {
      return new RpcOrganizationQueryTupleScheme();
    }
  }

  private static class RpcOrganizationQueryTupleScheme extends org.apache.thrift.scheme.TupleScheme<RpcOrganizationQuery> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RpcOrganizationQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPagingInfo()) {
        optionals.set(0);
      }
      if (struct.isSetResultList()) {
        optionals.set(1);
      }
      if (struct.isSetPageSize()) {
        optionals.set(2);
      }
      if (struct.isSetCurrentPage()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPagingInfo()) {
        struct.pagingInfo.write(oprot);
      }
      if (struct.isSetResultList()) {
        {
          oprot.writeI32(struct.resultList.size());
          for (RpcOrganization _iter4 : struct.resultList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
      if (struct.isSetCurrentPage()) {
        oprot.writeI32(struct.currentPage);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RpcOrganizationQuery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.pagingInfo = new com.goldgov.origin.core.service.rpc.RpcPagingInfo();
        struct.pagingInfo.read(iprot);
        struct.setPagingInfoIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.resultList = new java.util.ArrayList<RpcOrganization>(_list5.size);
          RpcOrganization _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new RpcOrganization();
            _elem6.read(iprot);
            struct.resultList.add(_elem6);
          }
        }
        struct.setResultListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.currentPage = iprot.readI32();
        struct.setCurrentPageIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

